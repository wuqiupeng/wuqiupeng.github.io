<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JAVA码农随笔</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.wqp0010.top/"/>
  <updated>2020-06-30T07:09:36.384Z</updated>
  <id>https://www.wqp0010.top/</id>
  
  <author>
    <name>wuqiupeng</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kafka深度解析 - Kafka Stream</title>
    <link href="https://www.wqp0010.top/2019/03/30/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90-Kafka-Stream/"/>
    <id>https://www.wqp0010.top/2019/03/30/Kafka深度解析-Kafka-Stream/</id>
    <published>2019-03-30T07:40:00.000Z</published>
    <updated>2020-06-30T07:09:36.384Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Kafka-Stream背景"><a href="#Kafka-Stream背景" class="headerlink" title="Kafka Stream背景"></a>Kafka Stream背景</h4><h5 id="Kafka-Stream是什么"><a href="#Kafka-Stream是什么" class="headerlink" title="Kafka Stream是什么"></a>Kafka Stream是什么</h5><p>Kafka Stream是Apache Kafka从0.10版本引入的一个新Feature。它是提供了对存储于Kafka内的数据进行流式处理和分析的功能。<br><br>Kafka Stream的特点如下：<br></p><ul><li>Kafka Stream提供了一个非常简单而轻量的Library，它可以非常方便地嵌入任意Java应用中，也可以任意方式打包和部署</li><li>除了Kafka外，无任何外部依赖</li><li>充分利用Kafka分区机制实现水平扩展和顺序性保证</li><li>通过可容错的state store实现高效的状态操作（如windowed join和aggregation）</li><li>支持正好一次处理语义</li><li>提供记录级的处理能力，从而实现毫秒级的低延迟</li><li>支持基于事件时间的窗口操作，并且可处理晚到的数据（late arrival of records）</li><li>同时提供底层的处理原语Processor（类似于Storm的spout和bolt），以及高层抽象的DSL（类似于Spark的map/group/reduce）</li></ul><h5 id="什么是流式计算"><a href="#什么是流式计算" class="headerlink" title="什么是流式计算"></a>什么是流式计算</h5><p>一般流式计算会与批量计算相比较。在流式计算模型中，输入是持续的，可以认为在时间上是无界的，也就意味着，永远拿不到全量数据去做计算。同时，计算结果是持续输出的，也即计算结果在时间上也是无界的。流式计算一般对实时性要求较高，同时一般是先定义目标计算，然后数据到来之后将计算逻辑应用于数据。同时为了提高计算效率，往往尽可能采用增量计算代替全量计算。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/stream_procissing.png" alt="stream_procissing" title="">                </div>                <div class="image-caption">stream_procissing</div>            </figure><p>批量处理模型中，一般先有全量数据集，然后定义计算逻辑，并将计算应用于全量数据。特点是全量计算，并且计算结果一次性全量输出。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/batch_procissing.png" alt="batch_procissing" title="">                </div>                <div class="image-caption">batch_procissing</div>            </figure><h5 id="为什么要有Kafka-Stream"><a href="#为什么要有Kafka-Stream" class="headerlink" title="为什么要有Kafka Stream"></a>为什么要有Kafka Stream</h5><p>当前已经有非常多的流式处理系统，最知名且应用最多的开源流式处理系统有Spark Streaming和Apache Storm。Apache Storm发展多年，应用广泛，提供记录级别的处理能力，当前也支持SQL on Stream。而Spark Streaming基于Apache Spark，可以非常方便与图计算，SQL处理等集成，功能强大，对于熟悉其它Spark应用开发的用户而言使用门槛低。另外，目前主流的Hadoop发行版，如MapR，Cloudera和Hortonworks，都集成了Apache Storm和Apache Spark，使得部署更容易。<br><br>既然Apache Spark与Apache Storm拥用如此多的优势，那为何还需要Kafka Stream呢？笔者认为主要有如下原因。<br><br>第一，Spark和Storm都是流式处理框架，而Kafka Stream提供的是一个基于Kafka的流式处理类库。框架要求开发者按照特定的方式去开发逻辑部分，供框架调用。开发者很难了解框架的具体运行方式，从而使得调试成本高，并且使用受限。而Kafka Stream作为流式处理类库，直接提供具体的类给开发者调用，整个应用的运行方式主要由开发者控制，方便使用和调试。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/library.png" alt="library" title="">                </div>                <div class="image-caption">library</div>            </figure><br>第二，虽然Cloudera与Hortonworks方便了Storm和Spark的部署，但是这些框架的部署仍然相对复杂。而Kafka Stream作为类库，可以非常方便的嵌入应用程序中，它对应用的打包和部署基本没有任何要求。更为重要的是，Kafka Stream充分利用了Kafka的分区机制和Consumer的Rebalance机制，使得Kafka Stream可以非常方便的水平扩展，并且各个实例可以使用不同的部署方式。具体来说，每个运行Kafka Stream的应用程序实例都包含了Kafka Consumer实例，多个同一应用的实例之间并行处理数据集。而不同实例之间的部署方式并不要求一致，比如部分实例可以运行在Web容器中，部分实例可运行在Docker或Kubernetes中。<br><br>第三，就流式处理系统而言，基本都支持Kafka作为数据源。例如Storm具有专门的kafka-spout，而Spark也提供专门的spark-streaming-kafka模块。事实上，Kafka基本上是主流的流式处理系统的标准数据源。换言之，大部分流式系统中都已部署了Kafka，此时使用Kafka Stream的成本非常低。<br><br>第四，使用Storm或Spark Streaming时，需要为框架本身的进程预留资源，如Storm的supervisor和Spark on YARN的node manager。即使对于应用实例而言，框架本身也会占用部分资源，如Spark Streaming需要为shuffle和storage预留内存。<br><br>第五，由于Kafka本身提供数据持久化，因此Kafka Stream提供滚动部署和滚动升级以及重新计算的能力。<br><br>第六，由于Kafka Consumer Rebalance机制，Kafka Stream可以在线动态调整并行度。<br></p><h4 id="Kafka-Stream架构"><a href="#Kafka-Stream架构" class="headerlink" title="Kafka Stream架构"></a>Kafka Stream架构</h4><h5 id="Kafka-Stream整体架构"><a href="#Kafka-Stream整体架构" class="headerlink" title="Kafka Stream整体架构"></a>Kafka Stream整体架构</h5><p>Kafka Stream的整体架构图如下所示。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/Kafka_Stream_Architecture.png" alt="Kafka_Stream_Architecture" title="">                </div>                <div class="image-caption">Kafka_Stream_Architecture</div>            </figure><br>Kafka Stream的数据源只能如上图所示是Kafka。但是处理结果并不一定要如上图所示输出到Kafka。实际上KStream和Ktable的实例化都需要指定Topic。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">KStream&lt;String, String&gt; stream = builder.stream(<span class="string">"words-stream"</span>);</span><br><span class="line"></span><br><span class="line">KTable&lt;String, String&gt; table = builder.table(<span class="string">"words-table"</span>, <span class="string">"words-store"</span>);</span><br></pre></td></tr></table></figure><p>另外，上图中的Consumer和Producer并不需要开发者在应用中显示实例化，而是由Kafka Stream根据参数隐式实例化和管理，从而降低了使用门槛。开发者只需要专注于开发核心业务逻辑，也即上图中Task内的部分。</p><h5 id="Processor-Topology"><a href="#Processor-Topology" class="headerlink" title="Processor Topology"></a>Processor Topology</h5><p>基于Kafka Stream的流式应用的业务逻辑全部通过一个被称为Processor Topology的地方执行。它与Storm的Topology和Spark的DAG类似，都定义了数据在各个处理单元（在Kafka Stream中被称作Processor）间的流动方式，或者说定义了数据的处理逻辑。<br><br>下面是一个Processor的示例，它实现了Word Count功能，并且每秒输出一次结果。<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WordCountProcessor</span> <span class="keyword">implements</span> <span class="title">Processor</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> ProcessorContext context;</span><br><span class="line">  <span class="keyword">private</span> KeyValueStore&lt;String, Integer&gt; kvStore;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@SuppressWarnings</span>(<span class="string">"unchecked"</span>)</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(ProcessorContext context)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.context = context;</span><br><span class="line">    <span class="keyword">this</span>.context.schedule(<span class="number">1000</span>);</span><br><span class="line">    <span class="keyword">this</span>.kvStore = (KeyValueStore&lt;String, Integer&gt;) context.getStateStore(<span class="string">"Counts"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(String key, String value)</span> </span>&#123;</span><br><span class="line">    Stream.of(value.toLowerCase().split(<span class="string">" "</span>)).forEach((String word) -&gt; &#123;</span><br><span class="line">      Optional&lt;Integer&gt; counts = Optional.ofNullable(kvStore.get(word));</span><br><span class="line">      <span class="keyword">int</span> count = counts.map(wordcount -&gt; wordcount + <span class="number">1</span>).orElse(<span class="number">1</span>);</span><br><span class="line">      kvStore.put(word, count);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">punctuate</span><span class="params">(<span class="keyword">long</span> timestamp)</span> </span>&#123;</span><br><span class="line">    KeyValueIterator&lt;String, Integer&gt; iterator = <span class="keyword">this</span>.kvStore.all();</span><br><span class="line">    iterator.forEachRemaining(entry -&gt; &#123;</span><br><span class="line">      context.forward(entry.key, entry.value);</span><br><span class="line">      <span class="keyword">this</span>.kvStore.delete(entry.key);</span><br><span class="line">    &#125;);</span><br><span class="line">    context.commit();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.kvStore.close();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>从上述代码中可见</p><ul><li>process定义了对每条记录的处理逻辑，也印证了Kafka可具有记录级的数据处理能力。</li><li>context.scheduler定义了punctuate被执行的周期，从而提供了实现窗口操作的能力。</li><li>context.getStateStore提供的状态存储为有状态计算（如窗口，聚合）提供了可能。</li></ul><h5 id="Kafka-Stream并行模型"><a href="#Kafka-Stream并行模型" class="headerlink" title="Kafka Stream并行模型"></a>Kafka Stream并行模型</h5><p>Kafka Stream的并行模型中，最小粒度为Task，而每个Task包含一个特定子Topology的所有Processor。因此每个Task所执行的代码完全一样，唯一的不同在于所处理的数据集互补。这一点跟Storm的Topology完全不一样。Storm的Topology的每一个Task只包含一个Spout或Bolt的实例。因此Storm的一个Topology内的不同Task之间需要通过网络通信传递数据，而Kafka Stream的Task包含了完整的子Topology，所以Task之间不需要传递数据，也就不需要网络通信。这一点降低了系统复杂度，也提高了处理效率。<br><br>如果某个Stream的输入Topic有多个(比如2个Topic，1个Partition数为4，另一个Partition数为3)，则总的Task数等于Partition数最多的那个Topic的Partition数（max(4,3)=4）。这是因为Kafka Stream使用了Consumer的Rebalance机制，每个Partition对应一个Task。<br><br>下图展示了在一个进程（Instance）中以2个Topic（Partition数均为4）为数据源的Kafka Stream应用的并行模型。从图中可以看到，由于Kafka Stream应用的默认线程数为1，所以4个Task全部在一个线程中运行。<br></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/1_thread.png" alt="1_thread" title="">                </div>                <div class="image-caption">1_thread</div>            </figure><p>为了充分利用多线程的优势，可以设置Kafka Stream的线程数。下图展示了线程数为2时的并行模型。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/2_threads.png" alt="2_threads" title="">                </div>                <div class="image-caption">2_threads</div>            </figure><p>前文有提到，Kafka Stream可被嵌入任意Java应用（理论上基于JVM的应用都可以）中，下图展示了在同一台机器的不同进程中同时启动同一Kafka Stream应用时的并行模型。注意，这里要保证两个进程的StreamsConfig.APPLICATION_ID_CONFIG完全一样。因为Kafka Stream将APPLICATION_ID_CONFIG作为隐式启动的Consumer的Group ID。只有保证APPLICATION_ID_CONFIG相同，才能保证这两个进程的Consumer属于同一个Group，从而可以通过Consumer Rebalance机制拿到互补的数据集。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/2_instances.png" alt="2_instances" title="">                </div>                <div class="image-caption">2_instances</div>            </figure><p>既然实现了多进程部署，可以以同样的方式实现多机器部署。该部署方式也要求所有进程的APPLICATION_ID_CONFIG完全一样。从图上也可以看到，每个实例中的线程数并不要求一样。但是无论如何部署，Task总数总会保证一致。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/2_servers.png" alt="2_servers" title="">                </div>                <div class="image-caption">2_servers</div>            </figure><p>这里对比一下Kafka Stream的Processor Topology与Storm的Topology。</p><ul><li>Storm的Topology由Spout和Bolt组成，Spout提供数据源，而Bolt提供计算和数据导出。Kafka Stream的Processor Topology完全由Processor组成，因为它的数据固定由Kafka的Topic提供。</li><li>Storm的不同Bolt运行在不同的Executor中，很可能位于不同的机器，需要通过网络通信传输数据。而Kafka Stream的Processor Topology的不同Processor完全运行于同一个Task中，也就完全处于同一个线程，无需网络通信。</li><li>Storm的Topology可以同时包含Shuffle部分和非Shuffle部分，并且往往一个Topology就是一个完整的应用。而Kafka Stream的一个物理Topology只包含非Shuffle部分，而Shuffle部分需要通过through操作显示完成，该操作将一个大的Topology分成了2个子Topology。</li><li>Storm的Topology内，不同Bolt/Spout的并行度可以不一样，而Kafka Stream的子Topology内，所有Processor的并行度完全一样。</li><li>Storm的一个Task只包含一个Spout或者Bolt的实例，而Kafka Stream的一个Task包含了一个子Topology的所有Processor。</li></ul><h5 id="KTable-vs-KStream"><a href="#KTable-vs-KStream" class="headerlink" title="KTable vs. KStream"></a>KTable vs. KStream</h5><p>KTable和KStream是Kafka Stream中非常重要的两个概念，它们是Kafka实现各种语义的基础。因此这里有必要分析下二者的区别。<br><br>KStream是一个数据流，可以认为所有记录都通过Insert only的方式插入进这个数据流里。而KTable代表一个完整的数据集，可以理解为数据库中的表。由于每条记录都是Key-Value对，这里可以将Key理解为数据库中的Primary Key，而Value可以理解为一行记录。可以认为KTable中的数据都是通过Update only的方式进入的。也就意味着，如果KTable对应的Topic中新进入的数据的Key已经存在，那么从KTable只会取出同一Key对应的最后一条数据，相当于新的数据更新了旧的数据。<br><br>以下图为例，假设有一个KStream和KTable，基于同一个Topic创建，并且该Topic中包含如下图所示5条数据。此时遍历KStream将得到与Topic内数据完全一样的所有5条数据，且顺序不变。而此时遍历KTable时，因为这5条记录中有3个不同的Key，所以将得到3条记录，每个Key对应最新的值，并且这三条数据之间的顺序与原来在Topic中的顺序保持一致。这一点与Kafka的日志compact相同。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/ktable_kstream.png" alt="ktable_kstream" title="">                </div>                <div class="image-caption">ktable_kstream</div>            </figure><p>此时如果对该KStream和KTable分别基于key做Group，对Value进行Sum，得到的结果将会不同。对KStream的计算结果是&lt;Jack，4&gt;，&lt;Lily，7&gt;，&lt;Mike，4&gt;。而对Ktable的计算结果是&lt;Mike，4&gt;，&lt;Jack，3&gt;，&lt;Lily，5&gt;。</p><h5 id="State-store"><a href="#State-store" class="headerlink" title="State store"></a>State store</h5><p>流式处理中，部分操作是无状态的，例如过滤操作（Kafka Stream DSL中用filer方法实现）。而部分操作是有状态的，需要记录中间状态，如Window操作和聚合计算。State store被用来存储中间状态。它可以是一个持久化的Key-Value存储，也可以是内存中的HashMap，或者是数据库。Kafka提供了基于Topic的状态存储。<br><br>Topic中存储的数据记录本身是Key-Value形式的，同时Kafka的log compaction机制可对历史数据做compact操作，保留每个Key对应的最后一个Value，从而在保证Key不丢失的前提下，减少总数据量，从而提高查询效率。<br><br>构造KTable时，需要指定其state store name。默认情况下，该名字也即用于存储该KTable的状态的Topic的名字，遍历KTable的过程，实际就是遍历它对应的state store，或者说遍历Topic的所有key，并取每个Key最新值的过程。为了使得该过程更加高效，默认情况下会对该Topic进行compact操作。<br><br>另外，除了KTable，所有状态计算，都需要指定state store name，从而记录中间状态。</p><h4 id="Kafka-Stream如何解决流式系统中关键问题"><a href="#Kafka-Stream如何解决流式系统中关键问题" class="headerlink" title="Kafka Stream如何解决流式系统中关键问题"></a>Kafka Stream如何解决流式系统中关键问题</h4><h5 id="时间"><a href="#时间" class="headerlink" title="时间"></a>时间</h5><p>在流式数据处理中，时间是数据的一个非常重要的属性。从Kafka 0.10开始，每条记录除了Key和Value外，还增加了timestamp属性。目前Kafka Stream支持三种时间</p><ul><li>事件发生时间。事件发生的时间，包含在数据记录中。发生时间由Producer在构造ProducerRecord时指定。并且需要Broker或者Topic将message.timestamp.type设置为CreateTime（默认值）才能生效。</li><li>消息接收时间，也即消息存入Broker的时间。当Broker或Topic将message.timestamp.type设置为LogAppendTime时生效。此时Broker会在接收到消息后，存入磁盘前，将其timestamp属性值设置为当前机器时间。一般消息接收时间比较接近于事件发生时间，部分场景下可代替事件发生时间。</li><li>消息处理时间，也即Kafka Stream处理消息时的时间。<br>注：Kafka Stream允许通过实现org.apache.kafka.streams.processor.TimestampExtractor接口自定义记录时间</li></ul><h5 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h5><p>前文提到，流式数据是在时间上无界的数据。而聚合操作只能作用在特定的数据集，也即有界的数据集上。因此需要通过某种方式从无界的数据集上按特定的语义选取出有界的数据。窗口是一种非常常用的设定计算边界的方式。不同的流式处理系统支持的窗口类似，但不尽相同。</p><p>Kafka Stream支持的窗口如下。</p><ul><li>Hopping Time Window 该窗口定义如下图所示。它有两个属性，一个是Window size，一个是Advance interval。Window size指定了窗口的大小，也即每次计算的数据集的大小。而Advance interval定义输出的时间间隔。一个典型的应用场景是，每隔5秒钟输出一次过去1个小时内网站的PV或者UV。</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/30/Kafka深度解析-Kafka-Stream/Hopping_Time_Window.gif" alt="Hopping_Time_Window" title="">                </div>                <div class="image-caption">Hopping_Time_Window</div>            </figure><ul><li>Tumbling Time Window该窗口定义如下图所示。可以认为它是Hopping Time Window的一种特例，也即Window size和Advance interval相等。它的特点是各个Window之间完全不相交。</li></ul><p><img src="/2019/03/30/Kafka深度解析-Kafka-Stream/Tumbling_Time_Window.gif" alt="Tumbling_Time_Window"></p><ul><li><p>Sliding Window该窗口只用于2个KStream进行Join计算时。该窗口的大小定义了Join两侧KStream的数据记录被认为在同一个窗口的最大时间差。假设该窗口的大小为5秒，则参与Join的2个KStream中，记录时间差小于5的记录被认为在同一个窗口中，可以进行Join计算。</p></li><li><p>Session Window该窗口用于对Key做Group后的聚合操作中。它需要对Key做分组，然后对组内的数据根据业务需求定义一个窗口的起始点和结束点。一个典型的案例是，希望通过Session Window计算某个用户访问网站的时间。对于一个特定的用户（用Key表示）而言，当发生登录操作时，该用户（Key）的窗口即开始，当发生退出操作或者超时时，该用户（Key）的窗口即结束。窗口结束时，可计算该用户的访问时间或者点击次数等。</p></li></ul><h5 id="Join"><a href="#Join" class="headerlink" title="Join"></a>Join</h5><p>Kafka Stream由于包含KStream和Ktable两种数据集，因此提供如下Join计算</p><ul><li>KTable Join KTable 结果仍为KTable。任意一边有更新，结果KTable都会更新。</li><li>KStream Join KStream 结果为KStream。必须带窗口操作，否则会造成Join操作一直不结束。</li><li>KStream Join KTable / GlobalKTable 结果为KStream。只有当KStream中有新数据时，才会触发Join计算并输出结果。KStream无新数据时，KTable的更新并不会触发Join计算，也不会输出数据。并且该更新只对下次Join生效。一个典型的使用场景是，KStream中的订单信息与KTable中的用户信息做关联计算。<br></li></ul><p>对于Join操作，如果要得到正确的计算结果，需要保证参与Join的KTable或KStream中Key相同的数据被分配到同一个Task。具体方法是</p><ul><li>参与Join的KTable或KStream的Key类型相同（实际上，业务含意也应该相同）</li><li>参与Join的KTable或KStream对应的Topic的Partition数相同<br>Partitioner策略的最终结果等效（实现不需要完全一样，只要效果一样即可），也即Key相同的情况下，被分配到ID相同的Partition内<br></li></ul><p>如果上述条件不满足，可通过调用如下方法使得它满足上述条件。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">KStream&lt;K, V&gt; <span class="title">through</span><span class="params">(Serde&lt;K&gt; keySerde, Serde&lt;V&gt; valSerde, StreamPartitioner&lt;K, V&gt; partitioner, String topic)</span></span></span><br></pre></td></tr></table></figure><h5 id="聚合与乱序处理"><a href="#聚合与乱序处理" class="headerlink" title="聚合与乱序处理"></a>聚合与乱序处理</h5><p>聚合操作可应用于KStream和KTable。当聚合发生在KStream上时必须指定窗口，从而限定计算的目标数据集。<br><br>需要说明的是，聚合操作的结果肯定是KTable。因为KTable是可更新的，可以在晚到的数据到来时（也即发生数据乱序时）更新结果KTable。<br><br>这里举例说明。假设对KStream以5秒为窗口大小，进行Tumbling Time Window上的Count操作。并且KStream先后出现时间为1秒, 3秒, 5秒的数据，此时5秒的窗口已达上限，Kafka Stream关闭该窗口，触发Count操作并将结果3输出到KTable中（假设该结果表示为&lt;1-5,3&gt;）。若1秒后，又收到了时间为2秒的记录，由于1-5秒的窗口已关闭，若直接抛弃该数据，则可认为之前的结果&lt;1-5,3&gt;不准确。而如果直接将完整的结果&lt;1-5,4&gt;输出到KStream中，则KStream中将会包含该窗口的2条记录，&lt;1-5,3&gt;, &lt;1-5,4&gt;，也会存在肮数据。因此Kafka Stream选择将聚合结果存于KTable中，此时新的结果&lt;1-5,4&gt;会替代旧的结果&lt;1-5,3&gt;。用户可得到完整的正确的结果。<br><br>这种方式保证了数据准确性，同时也提高了容错性。<br><br>但需要说明的是，Kafka Stream并不会对所有晚到的数据都重新计算并更新结果集，而是让用户设置一个retention period，将每个窗口的结果集在内存中保留一定时间，该窗口内的数据晚到时，直接合并计算，并更新结果KTable。超过retention period后，该窗口结果将从内存中删除，并且晚到的数据即使落入窗口，也会被直接丢弃。</p><h5 id="容错"><a href="#容错" class="headerlink" title="容错"></a>容错</h5><p>Kafka Stream从如下几个方面进行容错</p><ul><li>高可用的Partition保证无数据丢失。每个Task计算一个Partition，而Kafka数据复制机制保证了Partition内数据的高可用性，故无数据丢失风险。同时由于数据是持久化的，即使任务失败，依然可以重新计算。</li><li>状态存储实现快速故障恢复和从故障点继续处理。对于Join和聚合及窗口等有状态计算，状态存储可保存中间状态。即使发生Failover或Consumer Rebalance，仍然可以通过状态存储恢复中间状态，从而可以继续从Failover或Consumer Rebalance前的点继续计算。</li><li>KTable与retention period提供了对乱序数据的处理能力。</li></ul><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><ul><li>Kafka Stream的并行模型完全基于Kafka的分区机制和Rebalance机制，实现了在线动态调整并行度</li><li>同一Task包含了一个子Topology的所有Processor，使得所有处理逻辑都在同一线程内完成，避免了不必的网络通信开销，从而提高了效率。</li><li>through方法提供了类似Spark的Shuffle机制，为使用不同分区策略的数据提供了Join的可能<br>log compact提高了基于Kafka的state store的加载效率</li><li>state store为状态计算提供了可能</li><li>基于offset的计算进度管理以及基于state store的中间状态管理为发生Consumer rebalance或Failover时从断点处继续处理提供了可能，并为系统容错性提供了保障</li><li>KTable的引入，使得聚合计算拥用了处理乱序问题的能力</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;Kafka-Stream背景&quot;&gt;&lt;a href=&quot;#Kafka-Stream背景&quot; class=&quot;headerlink&quot; title=&quot;Kafka Stream背景&quot;&gt;&lt;/a&gt;Kafka Stream背景&lt;/h4&gt;&lt;h5 id=&quot;Kafka-Stream是什么&quot;&gt;
      
    
    </summary>
    
    
      <category term="Kafka" scheme="https://www.wqp0010.top/tags/Kafka/"/>
    
      <category term="大数据" scheme="https://www.wqp0010.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>Kafka深度解析</title>
    <link href="https://www.wqp0010.top/2019/03/15/Kafka%E6%B7%B1%E5%BA%A6%E8%A7%A3%E6%9E%90/"/>
    <id>https://www.wqp0010.top/2019/03/15/Kafka深度解析/</id>
    <published>2019-03-15T04:03:13.000Z</published>
    <updated>2020-06-30T06:30:12.913Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h4><h5 id="Kafka简介"><a href="#Kafka简介" class="headerlink" title="Kafka简介"></a>Kafka简介</h5><p>　　Kafka是一种分布式的，基于发布/订阅的消息系统。主要设计目标如下：</p><ul><li>以时间复杂度为O(1)的方式提供消息持久化能力，即使对TB级以上数据也能保证常数时间的访问性能</li><li>高吞吐率。即使在非常廉价的商用机器上也能做到单机支持每秒100K条消息的传输</li><li>支持Kafka Server间的消息分区，及分布式消费，同时保证每个partition内的消息顺序传输</li><li>同时支持离线数据处理和实时数据处理</li></ul><h5 id="为什么要用消息系统"><a href="#为什么要用消息系统" class="headerlink" title="为什么要用消息系统"></a>为什么要用消息系统</h5><ul><li>解耦</li></ul><p>在项目启动之初来预测将来项目会碰到什么需求，是极其困难的。消息队列在处理过程中间插入了一个隐含的、基于数据的接口层，两边的处理过程都要实现这一接口。这允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束</p><ul><li><p>冗余<br>有些情况下，处理数据的过程会失败。除非数据被持久化，否则将造成丢失。消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。在被许多消息队列所采用的”插入-获取-删除”范式中，在把一个消息从队列中删除之前，需要你的处理过程明确的指出该消息已经被处理完毕，确保你的数据被安全的保存直到你使用完毕。</p></li><li><p>扩展性<br>因为消息队列解耦了你的处理过程，所以增大消息入队和处理的频率是很容易的；只要另外增加处理过程即可。不需要改变代码、不需要调节参数。扩展就像调大电力按钮一样简单。</p></li><li><p>灵活性 &amp; 峰值处理能力<br>在访问量剧增的情况下，应用仍然需要继续发挥作用，但是这样的突发流量并不常见；如果为以能处理这类峰值访问为标准来投入资源随时待命无疑是巨大的浪费。使用消息队列能够使关键组件顶住突发的访问压力，而不会因为突发的超负荷的请求而完全崩溃。</p></li><li><p>可恢复性<br>当体系的一部分组件失效，不会影响到整个系统。消息队列降低了进程间的耦合度，所以即使一个处理消息的进程挂掉，加入队列中的消息仍然可以在系统恢复后被处理。而这种允许重试或者延后处理请求的能力通常是造就一个略感不便的用户和一个沮丧透顶的用户之间的区别。</p></li><li><p>送达保证<br>消息队列提供的冗余机制保证了消息能被实际的处理，只要一个进程读取了该队列即可。在此基础上，部分消息系统提供了一个”只送达一次”保证。无论有多少进程在从队列中领取数据，每一个消息只能被处理一次。这之所以成为可能，是因为获取一个消息只是”预定”了这个消息，暂时把它移出了队列。除非客户端明确的表示已经处理完了这个消息，否则这个消息会被放回队列中去，在一段可配置的时间之后可再次被处理。</p></li><li><p>顺序保证<br>在大多使用场景下，数据处理的顺序都很重要。消息队列本来就是排序的，并且能保证数据会按照特定的顺序来处理。部分消息系统保证消息通过FIFO（先进先出）的顺序来处理，因此消息在队列中的位置就是从队列中检索他们的位置。</p></li><li><p>缓冲<br>在任何重要的系统中，都会有需要不同的处理时间的元素。例如,加载一张图片比应用过滤器花费更少的时间。消息队列通过一个缓冲层来帮助任务最高效率的执行–写入队列的处理会尽可能的快速，而不受从队列读的预备处理的约束。该缓冲有助于控制和优化数据流经过系统的速度。</p></li><li><p>理解数据流<br>在一个分布式系统里，要得到一个关于用户操作会用多长时间及其原因的总体印象，是个巨大的挑战。消息队列通过消息被处理的频率，来方便的辅助确定那些表现不佳的处理过程或领域，这些地方的数据流都不够优化。</p></li><li><p>异步通信<br>很多时候，你不想也不需要立即处理消息。消息队列提供了异步处理机制，允许你把一个消息放入队列，但并不立即处理它。你想向队列中放入多少消息就放多少，然后在你乐意的时候再去处理它们。</p></li></ul><h5 id="常用Message-Queue对比"><a href="#常用Message-Queue对比" class="headerlink" title="常用Message Queue对比"></a>常用Message Queue对比</h5><ul><li>RabbitMQ</li></ul><p>　　RabbitMQ是使用Erlang编写的一个开源的消息队列，本身支持很多的协议：AMQP，XMPP, SMTP, STOMP，也正因如此，它非常重量级，更适合于企业级的开发。同时实现了Broker构架，这意味着消息在发送给客户端时先在中心队列排队。对路由，负载均衡或者数据持久化都有很好的支持。</p><ul><li>Redis</li></ul><p>　　Redis是一个基于Key-Value对的NoSQL数据库，开发维护很活跃。虽然它是一个Key-Value数据库存储系统，但它本身支持MQ功能，所以完全可以当做一个轻量级的队列服务来使用。对于RabbitMQ和Redis的入队和出队操作，各执行100万次，每10万次记录一次执行时间。测试数据分为128Bytes、512Bytes、1K和10K四个不同大小的数据。实验表明：入队时，当数据比较小时Redis的性能要高于RabbitMQ，而如果数据大小超过了10K，Redis则慢的无法忍受；出队时，无论数据大小，Redis都表现出非常好的性能，而RabbitMQ的出队性能则远低于Redis。</p><ul><li>ZeroMQ</li></ul><p>　　ZeroMQ号称最快的消息队列系统，尤其针对大吞吐量的需求场景。ZMQ能够实现RabbitMQ不擅长的高级/复杂的队列，但是开发人员需要自己组合多种技术框架，技术上的复杂度是对这MQ能够应用成功的挑战。ZeroMQ具有一个独特的非中间件的模式，你不需要安装和运行一个消息服务器或中间件，因为你的应用程序将扮演了这个服务角色。你只需要简单的引用ZeroMQ程序库，可以使用NuGet安装，然后你就可以愉快的在应用程序之间发送消息了。但是ZeroMQ仅提供非持久性的队列，也就是说如果宕机，数据将会丢失。其中，Twitter的Storm 0.9.0以前的版本中默认使用ZeroMQ作为数据流的传输（Storm从0.9版本开始同时支持ZeroMQ和Netty作为传输模块）。</p><ul><li>ActiveMQ</li></ul><p>　　ActiveMQ是Apache下的一个子项目。 类似于ZeroMQ，它能够以代理人和点对点的技术实现队列。同时类似于RabbitMQ，它少量代码就可以高效地实现高级应用场景。</p><ul><li>Kafka/Jafka</li></ul><p>　　Kafka是Apache下的一个子项目，是一个高性能跨语言分布式发布/订阅消息队列系统，而Jafka是在Kafka之上孵化而来的，即Kafka的一个升级版。具有以下特性：快速持久化，可以在O(1)的系统开销下进行消息持久化；高吞吐，在一台普通的服务器上既可以达到10W/s的吞吐速率；完全的分布式系统，Broker、Producer、Consumer都原生自动支持分布式，自动实现负载均衡；支持Hadoop数据并行加载，对于像Hadoop的一样的日志数据和离线分析系统，但又要求实时处理的限制，这是一个可行的解决方案。Kafka通过Hadoop的并行加载机制来统一了在线和离线的消息处理。Apache Kafka相对于ActiveMQ是一个非常轻量级的消息系统，除了性能非常好之外，还是一个工作良好的分布式系统。</p><h4 id="Kafka解析"><a href="#Kafka解析" class="headerlink" title="Kafka解析"></a>Kafka解析</h4><h5 id="Terminology"><a href="#Terminology" class="headerlink" title="Terminology"></a>Terminology</h5><ul><li>Broker</li></ul><p>　　Kafka集群包含一个或多个服务器，这种服务器被称为broker</p><ul><li>Topic</li></ul><p>　　每条发布到Kafka集群的消息都有一个类别，这个类别被称为topic。（物理上不同topic的消息分开存储，逻辑上一个topic的消息虽然保存于一个或多个broker上但用户只需指定消息的topic即可生产或消费数据而不必关心数据存于何处）</p><ul><li>Partition</li></ul><p>　　parition是物理上的概念，每个topic包含一个或多个partition，创建topic时可指定parition数量。每个partition对应于一个文件夹，该文件夹下存储该partition的数据和索引文件</p><ul><li>Producer</li></ul><p>　　负责发布消息到Kafka broker</p><ul><li>Consumer</li></ul><p>　　消费消息。每个consumer属于一个特定的consumer group（可为每个consumer指定group name，若不指定group name则属于默认的group）。使用consumer high level API时，同一topic的一条消息只能被同一个consumer group内的一个consumer消费，但多个consumer group可同时消费这一消息。</p><h5 id="Kafka架构"><a href="#Kafka架构" class="headerlink" title="Kafka架构"></a>Kafka架构</h5><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/KafkaArchitecture.png" alt="KafkaArchitecture" title="">                </div>                <div class="image-caption">KafkaArchitecture</div>            </figure><p>　　如上图所示，一个典型的kafka集群中包含若干producer（可以是web前端产生的page view，或者是服务器日志，系统CPU、memory等），若干broker（Kafka支持水平扩展，一般broker数量越多，集群吞吐率越高），若干consumer group，以及一个Zookeeper集群。Kafka通过Zookeeper管理集群配置，选举leader，以及在consumer group发生变化时进行rebalance。producer使用push模式将消息发布到broker，consumer使用pull模式从broker订阅并消费消息。</p><h6 id="Push-vs-Pull"><a href="#Push-vs-Pull" class="headerlink" title="Push vs. Pull"></a>Push vs. Pull</h6><p>　　作为一个messaging system，Kafka遵循了传统的方式，选择由producer向broker push消息并由consumer从broker pull消息。一些logging-centric system，比如Facebook的Scribe和Cloudera的Flume,采用非常不同的push模式。事实上，push模式和pull模式各有优劣。<br><br>　　push模式很难适应消费速率不同的消费者，因为消息发送速率是由broker决定的。push模式的目标是尽可能以最快速度传递消息，但是这样很容易造成consumer来不及处理消息，典型的表现就是拒绝服务以及网络拥塞。而pull模式则可以根据consumer的消费能力以适当的速率消费消息。</p><h6 id="Topic-amp-Partition"><a href="#Topic-amp-Partition" class="headerlink" title="Topic &amp; Partition"></a>Topic &amp; Partition</h6><p>　　Topic在逻辑上可以被认为是一个queue。每条消费都必须指定它的topic，可以简单理解为必须指明把这条消息放进哪个queue里。为了使得Kafka的吞吐率可以水平扩展，物理上把topic分成一个或多个partition，每个partition在物理上对应一个文件夹，该文件夹下存储这个partition的所有消息和索引文件。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/topic-partition.png" alt="topic-partition" title="">                </div>                <div class="image-caption">topic-partition</div>            </figure></p><p>　　每个日志文件都是“log entries”序列，每一个log entry包含一个4字节整型数（值为N），其后跟N个字节的消息体。每条消息都有一个当前partition下唯一的64字节的offset，它指明了这条消息的起始位置。磁盘上存储的消息格式如下：<br><br>    message length ： 4 bytes (value: 1+4+n)<br><br>    “magic” value ： 1 byte<br><br>    crc ： 4 bytes<br><br>    payload ： n bytes<br><br>这个“log entries”并非由一个文件构成，而是分成多个segment，每个segment名为该segment第一条消息的offset和“.kafka”组成。另外会有一个索引文件，它标明了每个segment下包含的log entry的offset范围，如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/partition_segment.png" alt="partition_segment" title="">                </div>                <div class="image-caption">partition_segment</div>            </figure><p>　　因为每条消息都被append到该partition中，是顺序写磁盘，因此效率非常高（经验证，顺序写磁盘效率比随机写内存还要高，这是Kafka高吞吐率的一个很重要的保证）。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/partition.png" alt="partition" title="">                </div>                <div class="image-caption">partition</div>            </figure><p>　　每一条消息被发送到broker时，会根据paritition规则选择被存储到哪一个partition。如果partition规则设置的合理，所有消息可以均匀分布到不同的partition里，这样就实现了水平扩展。（如果一个topic对应一个文件，那这个文件所在的机器I/O将会成为这个topic的性能瓶颈，而partition解决了这个问题）。在创建topic时可以在$KAFKA_HOME/config/server.properties中指定这个partition的数量(如下所示)，当然也可以在topic创建之后去修改parition数量。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># The default number of log partitions per topic. More partitions allow greater</span><br><span class="line"># parallelism for consumption, but this will also result in more files across</span><br><span class="line"># the brokers.</span><br><span class="line">num.partitions=3</span><br></pre></td></tr></table></figure><p>　　在发送一条消息时，可以指定这条消息的key，producer根据这个key和partition机制来判断将这条消息发送到哪个parition。paritition机制可以通过指定producer的paritition. class这一参数来指定，该class必须实现kafka.producer.Partitioner接口。本例中如果key可以被解析为整数则将对应的整数与partition总数取余，该消息会被发送到该数对应的partition。（每个parition都会有个序号）</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> kafka.producer.Partitioner;</span><br><span class="line"><span class="keyword">import</span> kafka.utils.VerifiableProperties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyPartitioner</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">Partitioner</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyPartitioner</span><span class="params">(VerifiableProperties verifiableProperties)</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">partition</span><span class="params">(Object key, <span class="keyword">int</span> numPartitions)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> partitionNum = Integer.parseInt((String) key);</span><br><span class="line">            <span class="keyword">return</span> Math.abs(Integer.parseInt((String) key) % numPartitions);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">return</span> Math.abs(key.hashCode() % numPartitions);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果将上例中的class作为partitioner.class，并通过如下代码发送20条消息（key分别为0，1，2，3）至topic2（包含4个partition）。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">　　<span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i++)&#123;</span><br><span class="line">　　      List messageList = <span class="keyword">new</span> ArrayList&lt;KeyedMessage&lt;String, String&gt;&gt;();</span><br><span class="line">　　      <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; j++）&#123;</span><br><span class="line">　　          messageList.add(<span class="keyword">new</span> KeyedMessage&lt;String, String&gt;(<span class="string">"topic2"</span>, j+<span class="string">""</span>, <span class="string">"The "</span> + i + <span class="string">" message for key "</span> + j));</span><br><span class="line">　　      &#125;</span><br><span class="line">　　      producer.send(messageList);</span><br><span class="line">    &#125;</span><br><span class="line">　　producer.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>　　则key相同的消息会被发送并存储到同一个partition里，而且key的序号正好和partition序号相同。（partition序号从0开始，本例中的key也正好从0开始）。如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/partition_key.png" alt="partition_key" title="">                </div>                <div class="image-caption">partition_key</div>            </figure><p>　　对于传统的message queue而言，一般会删除已经被消费的消息，而Kafka集群会保留所有的消息，无论其被消费与否。当然，因为磁盘限制，不可能永久保留所有数据（实际上也没必要），因此Kafka提供两种策略去删除旧数据。一是基于时间，二是基于partition文件大小。例如可以通过配置$KAFKA_HOME/config/server.properties，让Kafka删除一周前的数据，也可通过配置让Kafka在partition文件超过1GB时删除旧数据，如下所示。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">############################# Log Retention Policy #############################</span><br><span class="line"></span><br><span class="line"># The following configurations control the disposal of log segments. The policy can</span><br><span class="line"># be set to delete segments after a period of time, or after a given size has accumulated.</span><br><span class="line"># A segment will be deleted whenever *either* of these criteria are met. Deletion always happens</span><br><span class="line"># from the end of the log.</span><br><span class="line"></span><br><span class="line"># The minimum age of a log file to be eligible for deletion</span><br><span class="line">log.retention.hours=168</span><br><span class="line"></span><br><span class="line"># A size-based retention policy for logs. Segments are pruned from the log as long as the remaining</span><br><span class="line"># segments do not  drop below log.retention.bytes.</span><br><span class="line">#log.retention.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The maximum size of a log segment file. When this size is reached a new log segment will be created.</span><br><span class="line">log.segment.bytes=1073741824</span><br><span class="line"></span><br><span class="line"># The interval at which log segments are checked to see if they can be deleted according</span><br><span class="line"># to the retention policies</span><br><span class="line">log.retention.check.interval.ms=300000</span><br><span class="line"></span><br><span class="line"># By default the log cleaner is disabled and the log retention policy will default to</span><br><span class="line">#just delete segments after their retention expires.</span><br><span class="line"># If log.cleaner.enable=true is set the cleaner will be enabled and individual logs</span><br><span class="line">#can then be marked for log compaction.</span><br><span class="line">log.cleaner.enable=false</span><br></pre></td></tr></table></figure><p>　　这里要注意，因为Kafka读取特定消息的时间复杂度为O(1)，即与文件大小无关，所以这里删除文件与Kafka性能无关，选择怎样的删除策略只与磁盘以及具体的需求有关。另外，Kafka会为每一个consumer group保留一些metadata信息–当前消费的消息的position，也即offset。这个offset由consumer控制。正常情况下consumer会在消费完一条消息后线性增加这个offset。当然，consumer也可将offset设成一个较小的值，重新消费一些消息。因为offet由consumer控制，所以Kafka broker是无状态的，它不需要标记哪些消息被哪些consumer过，不需要通过broker去保证同一个consumer group只有一个consumer能消费某一条消息，因此也就不需要锁机制，这也为Kafka的高吞吐率提供了有力保障。</p><h6 id="Replication-amp-Leader-election"><a href="#Replication-amp-Leader-election" class="headerlink" title="Replication &amp; Leader election"></a>Replication &amp; Leader election</h6><p>　　Kafka从0.8开始提供partition级别的replication，replication的数量可在$KAFKA_HOME/config/server.properties中配置。</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">default.replication.factor = 1</span><br></pre></td></tr></table></figure><p>　　该 Replication与leader election配合提供了自动的failover机制。replication对Kafka的吞吐率是有一定影响的，但极大的增强了可用性。默认情况下，Kafka的replication数量为1。　　每个partition都有一个唯一的leader，所有的读写操作都在leader上完成，leader批量从leader上pull数据。一般情况下partition的数量大于等于broker的数量，并且所有partition的leader均匀分布在broker上。follower上的日志和其leader上的完全一样。<br><br>　　和大部分分布式系统一样，Kakfa处理失败需要明确定义一个broker是否alive。对于Kafka而言，Kafka存活包含两个条件，一是它必须维护与Zookeeper的session(这个通过Zookeeper的heartbeat机制来实现)。二是follower必须能够及时将leader的writing复制过来，不能“落后太多”。<br><br>　　leader会track“in sync”的node list。如果一个follower宕机，或者落后太多，leader将把它从”in sync” list中移除。这里所描述的“落后太多”指follower复制的消息落后于leader后的条数超过预定值，该值可在$KAFKA_HOME/config/server.properties中配置</p><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#If a replica falls more than this many messages behind the leader, the leader will remove the follower from ISR and treat it as dead</span><br><span class="line">replica.lag.max.messages=4000</span><br><span class="line"></span><br><span class="line">#If a follower has not sent any fetch requests for this window of time, the leader will remove the follower from ISR (in-sync replicas) and treat it as dead</span><br><span class="line">replica.lag.time.max.ms=10000</span><br></pre></td></tr></table></figure><p>　　需要说明的是，Kafka只解决”fail/recover”，不处理“Byzantine”（“拜占庭”）问题。<br><br>　　一条消息只有被“in sync” list里的所有follower都从leader复制过去才会被认为已提交。这样就避免了部分数据被写进了leader，还没来得及被任何follower复制就宕机了，而造成数据丢失（consumer无法消费这些数据）。而对于producer而言，它可以选择是否等待消息commit，这可以通过request.required.acks来设置。这种机制确保了只要“in sync” list有一个或以上的flollower，一条被commit的消息就不会丢失。<br><br>　　这里的复制机制即不是同步复制，也不是单纯的异步复制。事实上，同步复制要求“活着的”follower都复制完，这条消息才会被认为commit，这种复制方式极大的影响了吞吐率（高吞吐率是Kafka非常重要的一个特性）。而异步复制方式下，follower异步的从leader复制数据，数据只要被leader写入log就被认为已经commit，这种情况下如果follwer都落后于leader，而leader突然宕机，则会丢失数据。而Kafka的这种使用“in sync” list的方式则很好的均衡了确保数据不丢失以及吞吐率。follower可以批量的从leader复制数据，这样极大的提高复制性能（批量写磁盘），极大减少了follower与leader的差距（前文有说到，只要follower落后leader不太远，则被认为在“in sync” list里）。<br><br><br>　　上文说明了Kafka是如何做replication的，另外一个很重要的问题是当leader宕机了，怎样在follower中选举出新的leader。因为follower可能落后许多或者crash了，所以必须确保选择“最新”的follower作为新的leader。一个基本的原则就是，如果leader不在了，新的leader必须拥有原来的leader commit的所有消息。这就需要作一个折衷，如果leader在标明一条消息被commit前等待更多的follower确认，那在它die之后就有更多的follower可以作为新的leader，但这也会造成吞吐率的下降。<br><br>　　一种非常常用的选举leader的方式是“majority vote”（“少数服从多数”），但Kafka并未采用这种方式。这种模式下，如果我们有2f+1个replica（包含leader和follower），那在commit之前必须保证有f+1个replica复制完消息，为了保证正确选出新的leader，fail的replica不能超过f个。因为在剩下的任意f+1个replica里，至少有一个replica包含有最新的所有消息。这种方式有个很大的优势，系统的latency只取决于最快的几台server，也就是说，如果replication factor是3，那latency就取决于最快的那个follower而非最慢那个。majority vote也有一些劣势，为了保证leader election的正常进行，它所能容忍的fail的follower个数比较少。如果要容忍1个follower挂掉，必须要有3个以上的replica，如果要容忍2个follower挂掉，必须要有5个以上的replica。也就是说，在生产环境下为了保证较高的容错程度，必须要有大量的replica，而大量的replica又会在大数据量下导致性能的急剧下降。这就是这种算法更多用在Zookeeper这种共享集群配置的系统中而很少在需要存储大量数据的系统中使用的原因。例如HDFS的HA feature是基于majority-vote-based journal，但是它的数据存储并没有使用这种expensive的方式。<br><br>　　实际上，leader election算法非常多，比如Zookeper的Zab, Raft和Viewstamped Replication。而Kafka所使用的leader election算法更像微软的PacificA算法。<br><br>　　Kafka在Zookeeper中动态维护了一个ISR（in-sync replicas） set，这个set里的所有replica都跟上了leader，只有ISR里的成员才有被选为leader的可能。在这种模式下，对于f+1个replica，一个Kafka topic能在保证不丢失已经ommit的消息的前提下容忍f个replica的失败。在大多数使用场景中，这种模式是非常有利的。事实上，为了容忍f个replica的失败，majority vote和ISR在commit前需要等待的replica数量是一样的，但是ISR需要的总的replica的个数几乎是majority vote的一半。<br><br>　　虽然majority vote与ISR相比有不需等待最慢的server这一优势，但是Kafka作者认为Kafka可以通过producer选择是否被commit阻塞来改善这一问题，并且节省下来的replica和磁盘使得ISR模式仍然值得。<br>　<br>　　上文提到，在ISR中至少有一个follower时，Kafka可以确保已经commit的数据不丢失，但如果某一个partition的所有replica都挂了，就无法保证数据不丢失了。这种情况下有两种可行的方案：</p><ul><li>等待ISR中的任一个replica“活”过来，并且选它作为leader</li><li>选择第一个“活”过来的replica（不一定是ISR中的）作为leader<br><br>　　这就需要在可用性和一致性当中作出一个简单的平衡。如果一定要等待ISR中的replica“活”过来，那不可用的时间就可能会相对较长。而且如果ISR中的所有replica都无法“活”过来了，或者数据都丢失了，这个partition将永远不可用。选择第一个“活”过来的replica作为leader，而这个replica不是ISR中的replica，那即使它并不保证已经包含了所有已commit的消息，它也会成为leader而作为consumer的数据源（前文有说明，所有读写都由leader完成）。Kafka0.8.*使用了第二种方式。根据Kafka的文档，在以后的版本中，Kafka支持用户通过配置选择这两种方式中的一种，从而根据不同的使用场景选择高可用性还是强一致性。<br><br>　　上文说明了一个parition的replication过程，然尔Kafka集群需要管理成百上千个partition，Kafka通过round-robin的方式来平衡partition从而避免大量partition集中在了少数几个节点上。同时Kafka也需要平衡leader的分布，尽可能的让所有partition的leader均匀分布在不同broker上。另一方面，优化leadership election的过程也是很重要的，毕竟这段时间相应的partition处于不可用状态。一种简单的实现是暂停宕机的broker上的所有partition，并为之选举leader。实际上，Kafka选举一个broker作为controller，这个controller通过watch Zookeeper检测所有的broker failure，并负责为所有受影响的parition选举leader，再将相应的leader调整命令发送至受影响的broker，过程如下图所示。<br></li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/controller.png" alt="controller" title="">                </div>                <div class="image-caption">controller</div>            </figure><p>　　这样做的好处是，可以批量的通知leadership的变化，从而使得选举过程成本更低，尤其对大量的partition而言。如果controller失败了，幸存的所有broker都会尝试在Zookeeper中创建/controller-&gt;{this broker id}，如果创建成功（只可能有一个创建成功），则该broker会成为controller，若创建不成功，则该broker会等待新controller的命令。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/controller_failover.png" alt="controller_failover" title="">                </div>                <div class="image-caption">controller_failover</div>            </figure><h6 id="Consumer-group"><a href="#Consumer-group" class="headerlink" title="Consumer group"></a>Consumer group</h6><p>　　（本节所有描述都是基于consumer hight level API而非low level API）。<br><br>　　每一个consumer实例都属于一个consumer group，每一条消息只会被同一个consumer group里的一个consumer实例消费。（不同consumer group可以同时消费同一条消息）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/consumer_group.png" alt="consumer_group" title="">                </div>                <div class="image-caption">consumer_group</div>            </figure><p>　　很多传统的message queue都会在消息被消费完后将消息删除，一方面避免重复消费，另一方面可以保证queue的长度比较少，提高效率。而如上文所将，Kafka并不删除已消费的消息，为了实现传统message queue消息只被消费一次的语义，Kafka保证保证同一个consumer group里只有一个consumer会消费一条消息。与传统message queue不同的是，Kafka还允许不同consumer group同时消费同一条消息，这一特性可以为消息的多元化处理提供了支持。实际上，Kafka的设计理念之一就是同时提供离线处理和实时处理。根据这一特性，可以使用Storm这种实时流处理系统对消息进行实时在线处理，同时使用Hadoop这种批处理系统进行离线处理，还可以同时将数据实时备份到另一个数据中心，只需要保证这三个操作所使用的consumer在不同的consumer group即可。下图展示了Kafka在Linkedin的一种简化部署。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/kafka_in_linkedin.png" alt="kafka_in_linkedin" title="">                </div>                <div class="image-caption">kafka_in_linkedin</div>            </figure><p>　　为了更清晰展示Kafka consumer group的特性，笔者作了一项测试。创建一个topic (名为topic1)，创建一个属于group1的consumer实例，并创建三个属于group2的consumer实例，然后通过producer向topic1发送key分别为1，2，3r的消息。结果发现属于group1的consumer收到了所有的这三条消息，同时group2中的3个consumer分别收到了key为1，2，3的消息。如下图所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/consumer_group_test.png" alt="consumer_group_test" title="">                </div>                <div class="image-caption">consumer_group_test</div>            </figure><h6 id="Consumer-Rebalance"><a href="#Consumer-Rebalance" class="headerlink" title="Consumer Rebalance"></a>Consumer Rebalance</h6><p>　　（本节所讲述内容均基于Kafka consumer high level API）<br><br>　　Kafka保证同一consumer group中只有一个consumer会消费某条消息，实际上，Kafka保证的是稳定状态下每一个consumer实例只会消费某一个或多个特定partition的数据，而某个partition的数据只会被某一个特定的consumer实例所消费。这样设计的劣势是无法让同一个consumer group里的consumer均匀消费数据，优势是每个consumer不用都跟大量的broker通信，减少通信开销，同时也降低了分配难度，实现也更简单。另外，因为同一个partition里的数据是有序的，这种设计可以保证每个partition里的数据也是有序被消费。<br><br>　　如果某consumer group中consumer数量少于partition数量，则至少有一个consumer会消费多个partition的数据，如果consumer的数量与partition数量相同，则正好一个consumer消费一个partition的数据，而如果consumer的数量多于partition的数量时，会有部分consumer无法消费该topic下任何一条消息。<br><br>　　如下例所示，如果topic1有0，1，2共三个partition，当group1只有一个consumer(名为consumer1)时，该 consumer可消费这3个partition的所有数据。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer1.png" alt="group1_consumer1" title="">                </div>                <div class="image-caption">group1_consumer1</div>            </figure><br>　　增加一个consumer(consumer2)后，其中一个consumer（consumer1）可消费2个partition的数据，另外一个consumer(consumer2)可消费另外一个partition的数据。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_1_2.png" alt="group1_consumer_1_2" title="">                </div>                <div class="image-caption">group1_consumer_1_2</div>            </figure><br>　　再增加一个consumer(consumer3)后，每个consumer可消费一个partition的数据。consumer1消费partition0，consumer2消费partition1，consumer3消费partition2<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_1_2_3.png" alt="group1_consumer_1_2_3" title="">                </div>                <div class="image-caption">group1_consumer_1_2_3</div>            </figure><br>　　再增加一个consumer（consumer4）后，其中3个consumer可分别消费一个partition的数据，另外一个consumer（consumer4）不能消费topic1任何数据。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_1_2_3_4.png" alt="group1_consumer_1_2_3_4" title="">                </div>                <div class="image-caption">group1_consumer_1_2_3_4</div>            </figure><br>　　此时关闭consumer1，剩下的consumer可分别消费一个partition的数据。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_2_3_4.png" alt="group1_consumer_2_3_4" title="">                </div>                <div class="image-caption">group1_consumer_2_3_4</div>            </figure><br>　　接着关闭consumer2，剩下的consumer3可消费2个partition，consumer4可消费1个partition。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_3_4.png" alt="group1_consumer_3_4" title="">                </div>                <div class="image-caption">group1_consumer_3_4</div>            </figure><br>　　再关闭consumer3，剩下的consumer4可同时消费topic1的3个partition。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/03/15/Kafka深度解析/group1_consumer_4.png" alt="group1_consumer_4.png" title="">                </div>                <div class="image-caption">group1_consumer_4.png</div>            </figure></p><p>　　consumer rebalance算法如下： 　　</p><ul><li>Sort PT (all partitions in topic T)</li><li>Sort CG(all consumers in consumer group G)</li><li>Let i be the index position of Ci in CG and let N=size(PT)/size(CG)</li><li>Remove current entries owned by Ci from the partition owner registry</li><li>Assign partitions from iN to (i+1)N-1 to consumer Ci</li><li>Add newly assigned partitions to the partition owner registry</li></ul><p>　　目前consumer rebalance的控制策略是由每一个consumer通过Zookeeper完成的。具体的控制方式如下：</p><ul><li>Register itself in the consumer id registry under its group.</li><li>Register a watch on changes under the consumer id registry.</li><li>Register a watch on changes under the broker id registry.</li><li>If the consumer creates a message stream using a topic filter, it also registers a watch on changes under the broker topic registry.</li><li>Force itself to rebalance within in its consumer group.</li></ul><p>　　在这种策略下，每一个consumer或者broker的增加或者减少都会触发consumer rebalance。因为每个consumer只负责调整自己所消费的partition，为了保证整个consumer group的一致性，所以当一个consumer触发了rebalance时，该consumer group内的其它所有consumer也应该同时触发rebalance。</p><p>######消息Deliver guarantee<br>　　通过上文介绍，想必读者已经明天了producer和consumer是如何工作的，以及Kafka是如何做replication的，接下来要讨论的是Kafka如何确保消息在producer和consumer之间传输。有这么几种可能的delivery guarantee：</p><ul><li>At most once 消息可能会丢，但绝不会重复传输</li><li>At least one 消息绝不会丢，但可能会重复传输</li><li>Exactly once 每条消息肯定会被传输一次且仅传输一次，很多时候这是用户所想要的。<br>　　Kafka的delivery guarantee semantic非常直接。当producer向broker发送消息时，一旦这条消息被commit，因数replication的存在，它就不会丢。但是如果producer发送数据给broker后，遇到的网络问题而造成通信中断，那producer就无法判断该条消息是否已经commit。这一点有点像向一个自动生成primary key的数据库表中插入数据。虽然Kafka无法确定网络故障期间发生了什么，但是producer可以生成一种类似于primary key的东西，发生故障时幂等性的retry多次，这样就做到了Exactly one。<br>　　接下来讨论的是消息从broker到consumer的delivery guarantee semantic。（仅针对Kafka consumer high level API）。consumer在从broker读取消息后，可以选择commit，该操作会在Zookeeper中存下该consumer在该partition下读取的消息的offset。该consumer下一次再读该partition时会从下一条开始读取。如未commit，下一次读取的开始位置会跟上一次commit之后的开始位置相同。当然可以将consumer设置为autocommit，即consumer一旦读到数据立即自动commit。如果只讨论这一读取消息的过程，那Kafka是确保了Exactly once。但实际上实际使用中consumer并非读取完数据就结束了，而是要进行进一步处理，而数据处理与commit的顺序在很大程度上决定了消息从broker和consumer的delivery guarantee semantic。<br>读完消息先commit再处理消息。这种模式下，如果consumer在commit后还没来得及处理消息就crash了，下次重新开始工作后就无法读到刚刚已提交而未处理的消息，这就对应于At most once<br>读完消息先处理再commit。这种模式下，如果处理完了消息在commit之前consumer crash了，下次重新开始工作时还会处理刚刚未commit的消息，实际上该消息已经被处理过了。这就对应于At least once。在很多情况使用场景下，消息都有一个primary key，所以消息的处理往往具有幂等性，即多次处理这一条消息跟只处理一次是等效的，那就可以认为是Exactly once。（人个感觉这种说法有些牵强，毕竟它不是Kafka本身提供的机制，而且primary key本身不保证操作的幂等性。而且实际上我们说delivery guarantee semantic是讨论被处理多少次，而非处理结果怎样，因为处理方式多种多样，我们的系统不应该把处理过程的特性–如是否幂等性，当成Kafka本身的feature）<br>如果一定要做到Exactly once，就需要协调offset和实际操作的输出。精典的做法是引入两阶段提交。如果能让offset和操作输入存在同一个地方，会更简洁和通用。这种方式可能更好，因为许多输出系统可能不支持两阶段提交。比如，consumer拿到数据后可能把数据放到HDFS，如果把最新的offset和数据本身一起写到HDFS，那就可以保证数据的输出和offset的更新要么都完成，要么都不完成，间接实现Exactly once。（目前就high level API而言，offset是存于Zookeeper中的，无法存于HDFS，而low level API的offset是由自己去维护的，可以将之存于HDFS中）<br>　　总之，Kafka默认保证At least once，并且允许通过设置producer异步提交来实现At most once。而Exactly once要求与目标存储系统协作，幸运的是Kafka提供的offset可以使用这种方式非常直接非常容易。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景介绍&quot;&gt;&lt;a href=&quot;#背景介绍&quot; class=&quot;headerlink&quot; title=&quot;背景介绍&quot;&gt;&lt;/a&gt;背景介绍&lt;/h4&gt;&lt;h5 id=&quot;Kafka简介&quot;&gt;&lt;a href=&quot;#Kafka简介&quot; class=&quot;headerlink&quot; title=&quot;Kaf
      
    
    </summary>
    
    
      <category term="Kafka" scheme="https://www.wqp0010.top/tags/Kafka/"/>
    
      <category term="大数据" scheme="https://www.wqp0010.top/tags/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x实现redis共享session</title>
    <link href="https://www.wqp0010.top/2019/02/27/SpringBoot2-x%E5%AE%9E%E7%8E%B0redis%E5%85%B1%E4%BA%ABsession/"/>
    <id>https://www.wqp0010.top/2019/02/27/SpringBoot2-x实现redis共享session/</id>
    <published>2019-02-27T15:17:43.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本篇说一下SpringBoot使用redis共享session的方法</p><h4 id="导入依赖"><a href="#导入依赖" class="headerlink" title="导入依赖"></a>导入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-data-redis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置redis"><a href="#配置redis" class="headerlink" title="配置redis"></a>配置redis</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">session-redis</span></span><br><span class="line"><span class="attr">  redis:</span></span><br><span class="line"><span class="attr">    database:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">    host:</span> <span class="string">"localhost"</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">6379</span></span><br><span class="line"><span class="attr">    password:</span> <span class="string">""</span></span><br><span class="line"><span class="attr">    jedis:</span></span><br><span class="line"><span class="attr">      pool:</span></span><br><span class="line"><span class="attr">        max-active:</span> <span class="number">8</span></span><br><span class="line"><span class="attr">        max-idle:</span> <span class="number">0</span></span><br><span class="line"><span class="attr">        max-wait:</span> <span class="bullet">-1</span><span class="string">ms</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">100</span><span class="string">ms</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line">    <span class="comment">#session超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">1800</span></span><br><span class="line"><span class="attr">    namespace:</span> <span class="string">"session-redis"</span></span><br></pre></td></tr></table></figure><h4 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionConfig</span> <span class="keyword">extends</span> <span class="title">RedisHttpSessionConfiguration</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;spring.session.timeout&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> Integer sessionTimeoutInSec;</span><br><span class="line">  <span class="meta">@Value</span>(<span class="string">"$&#123;spring.session.namespace&#125;"</span>)</span><br><span class="line">  <span class="keyword">private</span> String sessionRedisNamespace;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> LettuceConnectionFactory <span class="title">connectionFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> LettuceConnectionFactory();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@PostConstruct</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">initConfig</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.setMaxInactiveIntervalInSeconds(sessionTimeoutInSec);</span><br><span class="line">    <span class="keyword">this</span>.setRedisNamespace(sessionRedisNamespace);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>写一个controller：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span>  DateTimeFormatter formatter = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(name = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String pwd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username) || StringUtils.isBlank(pwd)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"username和pwd不能为空"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">    session.setAttribute(<span class="string">"logintime"</span>,LocalDateTime.now());</span><br><span class="line">    <span class="keyword">return</span> username + <span class="string">"登陆成功"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(name = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">    String username = (String) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"您还未登录！"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"欢迎您"</span> + username + <span class="string">",登陆时间为"</span> + formatter.format((LocalDateTime)session.getAttribute(<span class="string">"logintime"</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先访问<a>localhost:8080/login</a>登陆，即可在redis看到共享的session信息</p><p>至此，实现完成</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://spring.io/projects/spring-session" target="_blank" rel="noopener">spring-session</a></li><li><a href="https://docs.spring.io/spring-session/docs/current/reference/html5/#httpsession-redis" target="_blank" rel="noopener">httpsession-redis</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;本篇说一下SpringBoot使用redis共享session的方法&lt;/p&gt;
&lt;h4 id=&quot;导入依赖&quot;&gt;&lt;a href=&quot;#导入依赖&quot; c
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="session" scheme="https://www.wqp0010.top/tags/session/"/>
    
      <category term="redis" scheme="https://www.wqp0010.top/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x实现mysql共享session</title>
    <link href="https://www.wqp0010.top/2019/02/15/SpringBoot2-x%E5%AE%9E%E7%8E%B0mysql%E5%85%B1%E4%BA%ABsession/"/>
    <id>https://www.wqp0010.top/2019/02/15/SpringBoot2-x实现mysql共享session/</id>
    <published>2019-02-15T15:00:03.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>网上的例子大部分是使用redis解决session共享问题，其实spring还提供了其他方案：<br><br><strong>Spring Session Core</strong> - provides core Spring Session functionalities and APIs<br><br><strong>Spring Session Data Redis</strong> - provides SessionRepository and ReactiveSessionRepository implementation backed by Redis and configuration support<br><br><strong>Spring Session JDBC </strong>- provides SessionRepository implementation backed by a relational database and configuration support<br><br><strong>Spring Session Hazelcast</strong> - provides SessionRepository implementation backed by Hazelcast and configuration support<br><br>接下来讲使用mysql的方式</p><h4 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> SPRING_SESSION_ATTRIBUTES;</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> SPRING_SESSION;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPRING_SESSION (</span><br><span class="line">    PRIMARY_ID <span class="built_in">CHAR</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    SESSION_ID <span class="built_in">CHAR</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    CREATION_TIME <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    LAST_ACCESS_TIME <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    MAX_INACTIVE_INTERVAL <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    EXPIRY_TIME <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    PRINCIPAL_NAME <span class="built_in">VARCHAR</span>(<span class="number">100</span>),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> SPRING_SESSION_PK PRIMARY <span class="keyword">KEY</span> (PRIMARY_ID)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> ROW_FORMAT=DYNAMIC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">UNIQUE</span> <span class="keyword">INDEX</span> SPRING_SESSION_IX1 <span class="keyword">ON</span> SPRING_SESSION (SESSION_ID);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> SPRING_SESSION_IX2 <span class="keyword">ON</span> SPRING_SESSION (EXPIRY_TIME);</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">INDEX</span> SPRING_SESSION_IX3 <span class="keyword">ON</span> SPRING_SESSION (PRINCIPAL_NAME);</span><br><span class="line"></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> SPRING_SESSION_ATTRIBUTES (</span><br><span class="line">    SESSION_PRIMARY_ID <span class="built_in">CHAR</span>(<span class="number">36</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ATTRIBUTE_NAME <span class="built_in">VARCHAR</span>(<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    ATTRIBUTE_BYTES <span class="built_in">BLOB</span> <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> SPRING_SESSION_ATTRIBUTES_PK PRIMARY <span class="keyword">KEY</span> (SESSION_PRIMARY_ID, ATTRIBUTE_NAME),</span><br><span class="line">    <span class="keyword">CONSTRAINT</span> SPRING_SESSION_ATTRIBUTES_FK <span class="keyword">FOREIGN</span> <span class="keyword">KEY</span> (SESSION_PRIMARY_ID) <span class="keyword">REFERENCES</span> SPRING_SESSION(PRIMARY_ID) <span class="keyword">ON</span> <span class="keyword">DELETE</span> <span class="keyword">CASCADE</span></span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">INNODB</span> ROW_FORMAT=DYNAMIC;</span><br></pre></td></tr></table></figure><p>这里创建了两个表，一个保存session一个保存session绑定的属性。该表结构是spring-session-jdbc指定的，不要修改结构</p><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.session<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-session-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当引入了spring-session-jdbc后会自动包含spring-session-core</p><h4 id="配置session"><a href="#配置session" class="headerlink" title="配置session"></a>配置session</h4><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line">    <span class="comment">#连接信息</span></span><br><span class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://localhost:3306/springboot?useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=GMT%2B8&amp;useSSL=false</span></span><br><span class="line"><span class="attr">    username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">    password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line"><span class="attr">  session:</span></span><br><span class="line">    <span class="comment">#session超时时间</span></span><br><span class="line"><span class="attr">    timeout:</span> <span class="number">120</span><span class="string">s</span></span><br><span class="line"><span class="attr">    jdbc:</span></span><br><span class="line">      <span class="comment">#清理session计划任务，默认是每分钟一次</span></span><br><span class="line"><span class="attr">      cleanup-cron:</span> <span class="number">0</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span> <span class="string">*</span></span><br></pre></td></tr></table></figure><p>当依赖中只有一个spring-session-jdbc时，不需要再指定spring.session.store-type=JDBC。<br>只有当存在多个实现(spring-session-redis)时才需要指定</p><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IndexController</span> </span>&#123;</span><br><span class="line">  <span class="meta">@RequestMapping</span>(name = <span class="string">"/login"</span>, method = RequestMethod.POST)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpSession session, String username, String pwd)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username) || StringUtils.isBlank(pwd)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"username和pwd不能为空"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    session.setAttribute(<span class="string">"username"</span>, username);</span><br><span class="line">    session.setAttribute(<span class="string">"logintime"</span>,LocalDateTime.now());</span><br><span class="line">    <span class="keyword">return</span> username + <span class="string">"登陆成功"</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(name = <span class="string">"/"</span>, method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(HttpSession session)</span> </span>&#123;</span><br><span class="line">    String username = (String) session.getAttribute(<span class="string">"username"</span>);</span><br><span class="line">    <span class="keyword">if</span> (StringUtils.isBlank(username)) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"您还未登录！"</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="string">"欢迎您"</span> + username + <span class="string">",登陆时间为"</span> + session.getAttribute(<span class="string">"logintime"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先访问<a>localhost:8080/login</a>登陆，可以看到数据库中的记录<br><br>SPRING_SESSION表<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/15/SpringBoot2-x实现mysql共享session/1.png" alt="SPRING_SESSION" title="">                </div>                <div class="image-caption">SPRING_SESSION</div>            </figure><br>SPRING_SESSION_ATTRIBUTES表<br><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2019/02/15/SpringBoot2-x实现mysql共享session/2.png" alt="SPRING_SESSION_ATTRIBUTES" title="">                </div>                <div class="image-caption">SPRING_SESSION_ATTRIBUTES</div>            </figure></p><p>至此，实现完成</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://spring.io/projects/spring-session" target="_blank" rel="noopener">spring-session</a></li><li><a href="https://docs.spring.io/spring-session/docs/current/reference/html5/#httpsession-jdbc-boot" target="_blank" rel="noopener">httpsession-jdbc-boot</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;网上的例子大部分是使用redis解决session共享问题，其实spring还提供了其他方案：&lt;br&gt;&lt;br&gt;&lt;strong&gt;Spring 
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="mysql" scheme="https://www.wqp0010.top/tags/mysql/"/>
    
      <category term="session" scheme="https://www.wqp0010.top/tags/session/"/>
    
  </entry>
  
  <entry>
    <title>docker命令 (三)</title>
    <link href="https://www.wqp0010.top/2019/01/09/docker%E5%91%BD%E4%BB%A4-%E4%B8%89/"/>
    <id>https://www.wqp0010.top/2019/01/09/docker命令-三/</id>
    <published>2019-01-09T14:37:40.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h4><ul><li>container</li></ul><p>容器。可以把每个 container 看做是一个独立的主机。 container 的创建通常有一个 image 作为其模板。类比成虚拟机的话可以理解为 image 就是虚拟机的镜像，而 container 就是一个个正在运行的虚拟机。一个虚拟机镜像可以创建出多个运行的虚拟主机且相互独立。 注意：container 一旦创建如果没有用 rm 命令移除，将会一直存在。所以用完后记得删除哦。</p><ul><li>image</li></ul><p>镜像。image 相当于 container 的模板，container 创建后里面有什么软件完全取决于它使用什么 image 。image 可以通过 container 创建（相当于把此时 container 的状态保存成快照），也可以通过 Dockerfile （一个文本文件，里面使用 docker 规定的一些写法）来创建。其中通过 Dockerfile 创建的方法能让环境配置和代码一起被版本库一起管理。</p><ul><li>registry</li></ul><p>存放镜像的仓库。只要能连接到 registry 每个人都可以很方便地通过 pull 命令从仓库中获取镜像。docker 默认使用的仓库是 docker hub，国内可以使用 DaoCloud 来建立 Mirror 连接到 docker hub，进而加快获取 image 的速度。</p><ul><li>boot2docker</li></ul><p>一个轻量级 linux 虚拟机，主要是为了让非 linux 系统也能用上 docker 。它实质上是一个 virtualbox 虚拟主机+一个能管理这个虚拟主机的命令行工具。由于这个虚拟主机的存在，在非 linux 系统上 container 需要获取一些物理系统资源（如 usb 设备）时不仅需要配置 docker 命令，还需要配置 boot2docker 这个虚拟主机的资源配置。</p><h4 id="常用命令表"><a href="#常用命令表" class="headerlink" title="常用命令表"></a>常用命令表</h4><ul><li>container 相关</li></ul><table><thead><tr><th>操作</th><th>命令</th><th>示例</th></tr></thead><tbody><tr><td>创建 container</td><td>docker create</td><td>docker create nginx:latest</td></tr><tr><td>创建并运行 container</td><td>docker run</td><td>docker run nginx:latest /bin/bash</td></tr><tr><td>创建并运行 container 后进入其 bash 控制台</td><td>docker run -t -i image /bin/bash</td><td>docker run -t -i ubuntu /bin/bash</td></tr><tr><td>创建并运行 container 并让其在后台运行，并端口映射</td><td>docker run -p [port in container]:[port in physical system] -d [image] [command]</td><td>docker run -p 5000:5000 -d training/webapp python app.py</td></tr><tr><td>查看正在运行的所有 container 信息</td><td>docker ps</td><td>docker ps</td></tr><tr><td>查看最后创建的 container</td><td>docker ps -l</td><td>docker ps -l</td></tr><tr><td>查看所有 container ，包括正在运行和已经关闭的</td><td>docker ps -a</td><td>docker ps -a</td></tr><tr><td>输出指定 container 的 stdout 信息<br>（用来看 log ，效果和 tail -f 类似，会实时输出。）</td><td>docker logs -f [container]</td><td>docker logs -f nostalgic_morse</td></tr><tr><td>获取 container 指定端口映射关系</td><td>docker port [container] [port]</td><td>docker port nostalgic_morse 5000</td></tr><tr><td>查看 container 进程列表</td><td>docker top [container]</td><td>docker top nostalgic_morse</td></tr><tr><td>查看 container 详细信息</td><td>docker inspect [container]</td><td>docker inspect nostalgic_morse</td></tr><tr><td>停止 continer</td><td>docker stop [container]</td><td>docker stop nostalgic_morse</td></tr><tr><td>强制停止 container</td><td>docker kill [container]</td><td>docker kill nostalgic_morse</td></tr><tr><td>启动一个已经停止的</td><td>container    docker start [container]</td><td>docker start nostalgic_morse</td></tr><tr><td>重启 container</td><td>(若 container 处于关闭状态，则直接启动)    docker restart [container]</td><td>docker restart nostalgic_morse</td></tr><tr><td>删除 container</td><td>docker rm [container]</td><td>docker rm nostalgic_morse</td></tr></tbody></table><ul><li>image 相关</li></ul><table><thead><tr><th>操作</th><th>命令</th><th>示例</th></tr></thead><tbody><tr><td>从 container 创建 image</td><td>docker commit [container] [imageName]</td><td>docker commit nostalgic_morse ouruser/sinatra:v2</td></tr><tr><td>从 Dockerfile 创建 image</td><td>docker build -t [imageName] [pathToFolder]</td><td>docker build ouruser/sinatra:v3 .</td></tr><tr><td>查看本地所有 image</td><td>docker images</td><td>docker images</td></tr><tr><td>在 registry 中搜索镜像</td><td>docker search [query]</td><td>docker search ubuntu</td></tr><tr><td>从 registry 中获取镜像 <br>（若无指定 tag 名称，则默认使用 latest 这个 tag）</td><td>docker pull [imageName]</td><td>docker pull ubuntu:14.04, docker pull training/webapp</td></tr><tr><td>给 image 打 tag</td><td>docker tag [imageId] [imageName]</td><td>docker tag 5db5f8471261 ouruser/sinatra:devel</td></tr><tr><td>把本地 image 上传到 registry 中<br> (此时会把所有 tag 都上传上去)</td><td>docker push [imageName]</td><td>docker push ouruser/sinatra</td></tr><tr><td>删除本地 image</td><td>docker rmi [image]</td><td>docker rmi training/sinatra</td></tr></tbody></table><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>docker 虽然是一个虚拟化技术，但使用上却更像是在管理系统软件或者代码。里面的一些 ps，top，rm 命令让使用 Linux 命令的人感到十分亲切（虽然它们的语义有点不一样。。。），start，stop，restart 让你感觉像是在控制 service ，而 push，pull，commit，tag 又让你觉得像是在使用 git 。因此程序员会感到很亲切且容易上手。</p><p>同时由于可以使用 Dockerfile 进行 image 的构建，且 docker hub 支持从 github 等地方自动根据 Dockerfile 进行构建，所以 docker 把运行环境也集成到 CI 中了。</p><p>美中不足的是由于 docker 目前仅支持 linux 上的容器技术，因此它要在非 Linux 系统下运行必须加多一个虚拟机层。这会造成一些在 Linux 上运行不会出现的问题（ip 地址、硬件资源、文件映射等），同时由于基于 linux ，一些 windows 的程序会水土不服，泛用性比虚拟机差一些。</p><p>但带来的好处是占用的系统资源低很多。一个只能开数个虚拟机的电脑一般能开数十个 container ，且 container 的启动时间一般在数秒内，比虚拟机快得多。另外，由于 docker 的 image 除了一些特殊的基础镜像外基本都是增量镜像，因此重复部分不会耗费额外的资源，所以几个看起来有数 g 的 image 如果里面使用的基础镜像有重复部分（大部分情况下都会有部分重复），那么它们实际占用空间将会小得多。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;container&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;容器。可以把每个 container 看做是一个独立的主机。 c
      
    
    </summary>
    
    
      <category term="docker" scheme="https://www.wqp0010.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.x整合druid和mybatis-plus</title>
    <link href="https://www.wqp0010.top/2018/12/29/SpringBoot2-x%E6%95%B4%E5%90%88druid%E5%92%8Cmybatis-plus/"/>
    <id>https://www.wqp0010.top/2018/12/29/SpringBoot2-x整合druid和mybatis-plus/</id>
    <published>2018-12-29T14:56:57.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>本篇说一下SpringBoot如何整合druid作为连接池，以及用mybatis-plus做持久层。<br>用到的版本号如下</p><table><thead><tr><th>名称</th><th>版本号</th></tr></thead><tbody><tr><td>SpringBoot</td><td>2.1.1.RELEASE</td></tr><tr><td>druid-spring-boot-starter</td><td>1.1.10</td></tr><tr><td>mybatis-plus-boot-starter</td><td>3.0.6</td></tr></tbody></table><p>例子里使用一个user表，直接利用mybatis-plus提供的接口进行增删改查操作</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键ID'</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'邮箱'</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`userEvaluation`</span> <span class="built_in">varchar</span>(<span class="number">45</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8mb4 <span class="keyword">COLLATE</span>=utf8mb4_bin</span><br></pre></td></tr></table></figure><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>首先，在pom.xml添加以下的依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>druid-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="添加相关配置"><a href="#添加相关配置" class="headerlink" title="添加相关配置"></a>添加相关配置</h4><p>在application.yml中增加以下配置</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据库配置</span></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">  datasource:</span></span><br><span class="line"><span class="attr">    druid:</span></span><br><span class="line">      <span class="comment">#连接信息</span></span><br><span class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://localhost:3306/test</span></span><br><span class="line"><span class="attr">      username:</span> <span class="string">root</span></span><br><span class="line"><span class="attr">      password:</span> <span class="number">123456</span></span><br><span class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">      <span class="comment">#连接池配置</span></span><br><span class="line"><span class="attr">      min-idle:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      initial-size:</span> <span class="number">5</span></span><br><span class="line"><span class="attr">      max-active:</span> <span class="number">20</span></span><br><span class="line">      <span class="comment"># 配置获取连接等待超时的时间</span></span><br><span class="line"><span class="attr">      max-wait:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒</span></span><br><span class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">60000</span></span><br><span class="line">      <span class="comment"># 配置一个连接在池中最小生存的时间，单位是毫秒</span></span><br><span class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">30000</span></span><br><span class="line"><span class="attr">      validation-query:</span> <span class="string">SELECT</span> <span class="number">1</span> <span class="string">FROM</span> <span class="string">DUAL</span></span><br><span class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">      test-on-return:</span> <span class="literal">false</span></span><br><span class="line">      <span class="comment">#监控</span></span><br><span class="line"><span class="attr">      filter:</span></span><br><span class="line"><span class="attr">        wall:</span></span><br><span class="line"><span class="attr">          enabled:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#mybatis-plus配置</span></span><br><span class="line"><span class="attr">mybatis-plus:</span></span><br><span class="line">  <span class="comment">#xml地址</span></span><br><span class="line"><span class="attr">  mapper-locations:</span></span><br><span class="line"><span class="attr">    - classpath:</span><span class="string">mapper/*.xml</span></span><br><span class="line">  <span class="comment">#实体扫描</span></span><br><span class="line"><span class="attr">  type-aliases-package:</span> <span class="string">top.wqp0010.s1.demo.entity.UserEntity</span></span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>准备工作完毕，开始写代码。总体结构如下<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/29/SpringBoot2-x整合druid和mybatis-plus/structure.png" alt="代码结构" title="">                </div>                <div class="image-caption">代码结构</div>            </figure></p><h5 id="映射xml"><a href="#映射xml" class="headerlink" title="映射xml"></a>映射xml</h5><p>在resources/mapper里新增一个UserMapper.xml</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"top.wqp0010.s1.demo.mapper.UserMapper"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里并没有写实际的方法，本例我们主要用mybatis-plus提供的方法进行操作，后续再加自己的方法进来</p><h5 id="配置类"><a href="#配置类" class="headerlink" title="配置类"></a>配置类</h5><p>新增一个mybatis-plus的配置类，指定要扫描的包以及定义分页插件</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@MapperScan</span>(<span class="string">"top.wqp0010.s1.demo.mapper*"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisPlusConfig</span> </span>&#123;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * mybatis-plus分页插件&lt;br&gt;</span></span><br><span class="line"><span class="comment">   * 文档：http://mp.baomidou.com&lt;br&gt;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> PaginationInterceptor <span class="title">paginationInterceptor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PaginationInterceptor paginationInterceptor = <span class="keyword">new</span> PaginationInterceptor();</span><br><span class="line">    <span class="keyword">return</span> paginationInterceptor;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>新增一个druid的配置类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DruidConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(DruidConfig.class);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">druidServlet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    log.info(<span class="string">"init Druid Servlet Configuration "</span>);</span><br><span class="line">    ServletRegistrationBean servletRegistrationBean = <span class="keyword">new</span> ServletRegistrationBean();</span><br><span class="line">    servletRegistrationBean.setServlet(<span class="keyword">new</span> StatViewServlet());</span><br><span class="line">    servletRegistrationBean.addUrlMappings(<span class="string">"/druid/*"</span>);</span><br><span class="line">    Map&lt;String, String&gt; initParameters = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">    initParameters.put(<span class="string">"loginUsername"</span>, <span class="string">"admin"</span>);<span class="comment">// 用户名</span></span><br><span class="line">    initParameters.put(<span class="string">"loginPassword"</span>, <span class="string">"admin"</span>);<span class="comment">// 密码</span></span><br><span class="line">    initParameters.put(<span class="string">"resetEnable"</span>, <span class="string">"false"</span>);<span class="comment">// 禁用HTML页面上的“Reset All”功能</span></span><br><span class="line">    initParameters.put(<span class="string">"allow"</span>, <span class="string">""</span>); <span class="comment">// IP白名单 (没有配置或者为空，则允许所有访问)</span></span><br><span class="line">    <span class="comment">//initParameters.put("deny", "192.168.20.38");// IP黑名单 (存在共同时，deny优先于allow)</span></span><br><span class="line">    servletRegistrationBean.setInitParameters(initParameters);</span><br><span class="line">    <span class="keyword">return</span> servletRegistrationBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">filterRegistrationBean</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    FilterRegistrationBean filterRegistrationBean = <span class="keyword">new</span> FilterRegistrationBean();</span><br><span class="line">    filterRegistrationBean.setFilter(<span class="keyword">new</span> WebStatFilter());</span><br><span class="line">    filterRegistrationBean.addUrlPatterns(<span class="string">"/*"</span>);</span><br><span class="line">    filterRegistrationBean.addInitParameter(<span class="string">"exclusions"</span>, <span class="string">"*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*"</span>);</span><br><span class="line">    <span class="keyword">return</span> filterRegistrationBean;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h5><p>定义UserEntity，这个类和数据库user表对应。<br>这里同时展示了如何映射表名以及表字段和类字段名不同时的处理</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *  数据库表名为"user"，用<span class="doctag">@TableName</span>映射</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@TableName</span>(<span class="string">"user"</span>)</span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 表主键 此处需要设置为数据库ID自增</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableId</span>(type = IdType.AUTO)</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">long</span> id;</span><br><span class="line">  <span class="keyword">private</span> String name;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">  <span class="keyword">private</span> String email;</span><br><span class="line">  <span class="keyword">private</span> String phone;</span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 此处故意用了类字段名和数据库列明不相符</span></span><br><span class="line"><span class="comment">   * 可以用<span class="doctag">@TableField</span>注解来表示</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="meta">@TableField</span>(<span class="string">"userEvaluation"</span>)</span><br><span class="line">  <span class="keyword">private</span> String evaluation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Mapper类"><a href="#Mapper类" class="headerlink" title="Mapper类"></a>Mapper类</h5><p>定义UserMapper接口，主要是继承了mybatis-plus的BaseMapper接口，没有定义自己的方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapper</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Service接口"><a href="#Service接口" class="headerlink" title="Service接口"></a>Service接口</h5><p>定义IUserService接口，主要是继承mybatis-plus的IService接口，同样没有自己的实现</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IUserService</span> <span class="keyword">extends</span> <span class="title">IService</span>&lt;<span class="title">UserEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>UserServiceImpl 实现类</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserMapper</span>, <span class="title">UserEntity</span>&gt; <span class="keyword">implements</span> <span class="title">IUserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h5><p>可以看到，上面我们定义的Mapper和Service都是空的，并没有实现具体的方法。现在我们利用mybatis-plus预置的接口实现增删改查</p><h6 id="增"><a href="#增" class="headerlink" title="增"></a>增</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Autowired</span></span><br><span class="line">  IUserService userService;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(<span class="string">"/user/add"</span>)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">addUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里为了测试方便 直接产生了一些随机字符串作为用户参数</span></span><br><span class="line">    UserEntity userEntity = <span class="keyword">new</span> UserEntity();</span><br><span class="line">    userEntity.setName(RandomStringUtils.randomAlphabetic(<span class="number">5</span>));</span><br><span class="line">    userEntity.setAge(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</span><br><span class="line">    userEntity.setEmail(RandomStringUtils.randomAlphanumeric(<span class="number">5</span>) + <span class="string">"@test.com"</span>);</span><br><span class="line">    userEntity.setPhone(<span class="string">"18"</span> + RandomStringUtils.randomNumeric(<span class="number">9</span>));</span><br><span class="line">    userEntity.setEvaluation(RandomStringUtils.randomAlphanumeric(<span class="number">20</span>));</span><br><span class="line">    userService.save(userEntity);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success insert user = "</span> + JSON.toJSONString(userEntity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="删"><a href="#删" class="headerlink" title="删"></a>删</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/remove"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeUser</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">  userService.removeById(id);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success delete userId = "</span> + id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="改"><a href="#改" class="headerlink" title="改"></a>改</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/update"</span>)</span><br><span class="line"> <span class="function"><span class="keyword">public</span> String <span class="title">updateUser</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">   <span class="comment">//为了测试方便，属性值都再次随机赋值</span></span><br><span class="line">   UserEntity userEntity = <span class="keyword">new</span> UserEntity();</span><br><span class="line">   userEntity.setId(id);</span><br><span class="line">   userEntity.setName(RandomStringUtils.randomAlphabetic(<span class="number">5</span>));</span><br><span class="line">   userEntity.setAge(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>));</span><br><span class="line">   userEntity.setEmail(RandomStringUtils.randomAlphanumeric(<span class="number">5</span>) + <span class="string">"@test.com"</span>);</span><br><span class="line">   userEntity.setPhone(<span class="string">"18"</span> + RandomStringUtils.randomNumeric(<span class="number">9</span>));</span><br><span class="line">   userEntity.setEvaluation(RandomStringUtils.randomAlphanumeric(<span class="number">20</span>));</span><br><span class="line">   userService.updateById(userEntity);</span><br><span class="line">   <span class="keyword">return</span> <span class="string">"success update user = "</span> + JSON.toJSONString(userEntity);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h6 id="查单条记录"><a href="#查单条记录" class="headerlink" title="查单条记录"></a>查单条记录</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/info"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> UserEntity <span class="title">getUser</span><span class="params">(@RequestParam(<span class="string">"id"</span>)</span> <span class="keyword">int</span> id) </span>&#123;</span><br><span class="line">  UserEntity userEntity = userService.getById(id);</span><br><span class="line">  <span class="keyword">return</span> userEntity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h6><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user/list"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> IPage <span class="title">getUserList</span><span class="params">(Page page)</span> </span>&#123;</span><br><span class="line">  page.setDesc(<span class="string">"name"</span>);</span><br><span class="line">  IPage iPage = userService.page(page);</span><br><span class="line">  <span class="keyword">return</span> iPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>浏览器访问<a><a href="http://localhost:8080/user/list?size=3&amp;current=1" target="_blank" rel="noopener">http://localhost:8080/user/list?size=3&amp;current=1</a></a><br>返回的结果即是根据数据库name字段倒叙的分页结果，是不是很方便</p><p>打开<a><a href="http://localhost:8080/druid/" target="_blank" rel="noopener">http://localhost:8080/druid/</a></a>即可看到druid的监控页</p><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ol><li><a href="https://github.com/alibaba/druid" target="_blank" rel="noopener">druid官网</a></li><li><a href="https://mp.baomidou.com/" target="_blank" rel="noopener">mybatis-plus官网</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;本篇说一下SpringBoot如何整合druid作为连接池，以及用mybatis-plus做持久层。&lt;br&gt;用到的版本号如下&lt;/p&gt;
&lt;ta
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="Druid" scheme="https://www.wqp0010.top/tags/Druid/"/>
    
      <category term="Mybatis-Plus" scheme="https://www.wqp0010.top/tags/Mybatis-Plus/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0整合Prometheus Grafana(二)</title>
    <link href="https://www.wqp0010.top/2018/12/28/SpringBoot2-0%E6%95%B4%E5%90%88Prometheus-Grafana-%E4%BA%8C/"/>
    <id>https://www.wqp0010.top/2018/12/28/SpringBoot2-0整合Prometheus-Grafana-二/</id>
    <published>2018-12-28T14:37:08.000Z</published>
    <updated>2020-06-30T00:33:58.858Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>在前一篇文章中，最后能看到的只是Prometheus自带的一些监控指标，本篇就讲一下如何添加自己的监控信息。</p><h4 id="增加配置类"><a href="#增加配置类" class="headerlink" title="增加配置类"></a>增加配置类</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.demo.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.micrometer.core.instrument.MeterRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.actuate.autoconfigure.metrics.MeterRegistryCustomizer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MetricsConfig</span> </span>&#123;</span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> MeterRegistryCustomizer&lt;MeterRegistry&gt; <span class="title">commonTags</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> r -&gt; &#123;</span><br><span class="line">      r.config().commonTags(<span class="string">"application"</span>, <span class="string">"com.example.demo.config"</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Counter"><a href="#Counter" class="headerlink" title="Counter"></a>Counter</h4><p>Counter是一种只加不减的计数器</p><h5 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h5><p>测试代码</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPrometheusController</span> </span>&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">final</span> Counter counter = Metrics.counter(<span class="string">"getUserInfoCount"</span>, <span class="string">"user"</span>, <span class="string">"info"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/user/info"</span>, method = RequestMethod.GET)</span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    counter.increment(<span class="number">1</span>D);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>程序起来后，打开<a><a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a></a>可以看到</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># HELP getUserInfoCount_total  </span></span><br><span class="line"><span class="comment"># TYPE getUserInfoCount_total counter</span></span><br><span class="line">getUserInfoCount_total&#123;application=<span class="string">"com.example.demo.config"</span>,user=<span class="string">"info"</span>,&#125; 0.0</span><br></pre></td></tr></table></figure><p>这里就可以看到添加项的名称 类型 数量值等信息。<br>浏览器刷新几次<a><a href="http://localhost:8080/user/info" target="_blank" rel="noopener">http://localhost:8080/user/info</a></a>后可以观察到这个数量的变化</p><h5 id="增加监控项"><a href="#增加监控项" class="headerlink" title="增加监控项"></a>增加监控项</h5><p>此时如果在打开<a><a href="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090</a></a>页面，则可以看到多了getUserInfoCount_total监控这一项<br>打开<a><a href="http://localhost:3000" target="_blank" rel="noopener">http://localhost:3000</a></a> grafana页面，新增表盘时监控项选择“getUserInfoCount_total”即可</p><h4 id="Gauge"><a href="#Gauge" class="headerlink" title="Gauge"></a>Gauge</h4><p>Gauge是一个表示单个数值的度量，它可以表示任意地上下移动的数值测量</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 假设用来监控用户缓存数量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">AtomicInteger atomicInteger = Metrics.gauge(<span class="string">"getUserCacheCount"</span>, <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/cache/add"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">addCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  atomicInteger.addAndGet(<span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/cache/remove"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">removeCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  atomicInteger.decrementAndGet();</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后，反复调用几次<a><a href="http://localhost:8080/user/cache/add" target="_blank" rel="noopener">http://localhost:8080/user/cache/add</a></a>和<a><a href="http://localhost:8080/user/cache/remove" target="_blank" rel="noopener">http://localhost:8080/user/cache/remove</a></a>,然后参照上面的在grafana添加表盘即可</p><h4 id="Timer"><a href="#Timer" class="headerlink" title="Timer"></a>Timer</h4><p>Timer(计时器)同时测量一个特定的代码逻辑块的调用(执行)速度和它的时间分布</p><h5 id="java代码-1"><a href="#java代码-1" class="headerlink" title="java代码"></a>java代码</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Timer timer = Metrics.timer(<span class="string">"getUserInfoList"</span>, <span class="string">"user"</span>, <span class="string">"list"</span>);</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/user/list"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//模拟耗时操作</span></span><br><span class="line">    TimeUnit.MILLISECONDS.sleep(<span class="keyword">new</span> Random().nextInt(<span class="number">100</span>) + <span class="number">100</span>);</span><br><span class="line">  &#125;<span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">    <span class="keyword">long</span> duration = end - start;</span><br><span class="line">    timer.record(duration, TimeUnit.MILLISECONDS);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动后，反复调用几次<a><a href="http://localhost:8080/user/list" target="_blank" rel="noopener">http://localhost:8080/user/list</a></a></p><h5 id="增加监控项-1"><a href="#增加监控项-1" class="headerlink" title="增加监控项"></a>增加监控项</h5><p>添加Timer后，主要是增加了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getUserInfoList_seconds_count&#123;application=<span class="string">"com.example.demo.config"</span>,user=<span class="string">"list"</span>,&#125; 12.0</span><br><span class="line">getUserInfoList_seconds_sum&#123;application=<span class="string">"com.example.demo.config"</span>,user=<span class="string">"list"</span>,&#125; 1.828</span><br></pre></td></tr></table></figure><p>在grafana添加仪表选择需要监控的指标时，需要特别配置。前面都是直接添加了已有项，现在要加一些函数操作<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/28/SpringBoot2-0整合Prometheus-Grafana-二/function.png" alt="平均延时" title="">                </div>                <div class="image-caption">平均延时</div>            </figure></p><p>这样就是平均延时了<br>吞吐量则是</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">rate(getUserInfoList_seconds_count[10s])</span><br></pre></td></tr></table></figure><p>此处填写时会有模糊匹配函数支持，很方便</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;在前一篇文章中，最后能看到的只是Prometheus自带的一些监控指标，本篇就讲一下如何添加自己的监控信息。&lt;/p&gt;
&lt;h4 id=&quot;增加配
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="Prometheus" scheme="https://www.wqp0010.top/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://www.wqp0010.top/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot2.0整合Prometheus Grafana</title>
    <link href="https://www.wqp0010.top/2018/12/27/SpringBoot2-0%E6%95%B4%E5%90%88Prometheus-Grafana/"/>
    <id>https://www.wqp0010.top/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/</id>
    <published>2018-12-27T17:17:11.000Z</published>
    <updated>2020-06-30T00:33:58.862Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>总体框架图<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/info.png" alt="Prometheus首页" title="">                </div>                <div class="image-caption">Prometheus首页</div>            </figure></p><h4 id="prometheus"><a href="#prometheus" class="headerlink" title="prometheus"></a>prometheus</h4><h5 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h5><p><a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a>，是一个开源的系统监控和告警的工具包，其采用Pull方式采集时间序列的度量数据（也支持push方式），通过Http协议传输。它的工作方式是被监控的服务需要公开一个<a href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noopener">Prometheus端点</a>，这端点是一个HTTP接口，该接口公开了度量的列表和当前的值，然后Prometheus应用从此接口定时拉取数据，一般可以存放在时序数据库中，然后通过可视化的Dashboard(e.g.Grafana)进行数据展示。</p><h5 id="支持的prometheus-metrics"><a href="#支持的prometheus-metrics" class="headerlink" title="支持的prometheus metrics"></a>支持的prometheus metrics</h5><p>Counter，Gauge，Histogram，Summary<a href="https://prometheus.io/docs/concepts/metric_types/" target="_blank" rel="noopener">等等</a>。需要注意的是counter只能增不能减，适用于服务请求量，用户访问数等统计，但是如果需要统计有增有减的指标需要用Gauge。</p><h5 id="exporter"><a href="#exporter" class="headerlink" title="exporter"></a>exporter</h5><p>支持的<a href="https://prometheus.io/docs/instrumenting/exporters/" target="_blank" rel="noopener">exporter</a>很多，可以方便的监控很多应用，同时也可以自定义开发非官方提供的exporter。</p><h4 id="grafana"><a href="#grafana" class="headerlink" title="grafana"></a>grafana</h4><h5 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h5><p><a href="https://grafana.com/" target="_blank" rel="noopener">grafana</a>，是一个开源的dashboard展示工具，可以支持很多主流数据源，包括时序性的和非时序性的。其提供的展示配置以及可扩展性能满足绝大部分时间序列数据展示需求，是一个比较优秀的工具。</p><h5 id="支持的数据源"><a href="#支持的数据源" class="headerlink" title="支持的数据源"></a>支持的数据源</h5><p>prometheus，inflexdb，elasticsearch，mysql，postgreSQL，openTSDB等，<a href="https://grafana.com/plugins?type=datasource" target="_blank" rel="noopener">更多数据源</a></p><h3 id="SpringBoot暴露指标"><a href="#SpringBoot暴露指标" class="headerlink" title="SpringBoot暴露指标"></a>SpringBoot暴露指标</h3><h4 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h4><p>在pom.xml增加以下依赖</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.micrometer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>micrometer-registry-prometheus<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="配置信息"><a href="#配置信息" class="headerlink" title="配置信息"></a>配置信息</h4><p>在application.yml增加以下配置项</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment">##prometheusj</span></span><br><span class="line"><span class="attr">management:</span></span><br><span class="line"><span class="attr">  metrics:</span></span><br><span class="line"><span class="attr">    export:</span></span><br><span class="line"><span class="attr">      prometheus:</span></span><br><span class="line"><span class="attr">        enabled:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">        step:</span> <span class="number">1</span><span class="string">m</span></span><br><span class="line"><span class="attr">        descriptions:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  web:</span></span><br><span class="line"><span class="attr">    server:</span></span><br><span class="line"><span class="attr">      auto-time-requests:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">  endpoints:</span></span><br><span class="line"><span class="attr">    prometheus:</span></span><br><span class="line"><span class="attr">      id:</span> <span class="string">springmetrics</span></span><br><span class="line"><span class="attr">    web:</span></span><br><span class="line"><span class="attr">      exposure:</span></span><br><span class="line"><span class="attr">        include:</span>         <span class="string">health,info,env,prometheus,metrics,httptrace,threaddump,heapdump,springmetrics</span></span><br></pre></td></tr></table></figure><h4 id="启动SpringBoot应用"><a href="#启动SpringBoot应用" class="headerlink" title="启动SpringBoot应用"></a>启动SpringBoot应用</h4><p>启动应用后，打开 <a><a href="http://localhost:8080/actuator/prometheus" target="_blank" rel="noopener">http://localhost:8080/actuator/prometheus</a></a> 即可看到暴露的信息</p><h3 id="安装Prometheus"><a href="#安装Prometheus" class="headerlink" title="安装Prometheus"></a>安装Prometheus</h3><h4 id="官网下载压缩包"><a href="#官网下载压缩包" class="headerlink" title="官网下载压缩包"></a>官网下载压缩包</h4><p>官网地址：<a><a href="https://prometheus.io/download/" target="_blank" rel="noopener">https://prometheus.io/download/</a></a><br>根据操作系统下载对应的安装包</p><h4 id="解压"><a href="#解压" class="headerlink" title="解压"></a>解压</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># tar zxvf prometheus-2.6.0.darwin-amd64.tar.gz</span></span><br></pre></td></tr></table></figure><h4 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim prometheus.yml</span></span><br></pre></td></tr></table></figure><p>修改为以下内容</p><figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># my global config</span></span><br><span class="line"><span class="attr">global:</span></span><br><span class="line"><span class="attr">  scrape_interval:</span>     <span class="number">15</span><span class="string">s</span> <span class="comment"># Set the scrape interval to every 15 seconds. Default is every 1 minute.</span></span><br><span class="line"><span class="attr">  evaluation_interval:</span> <span class="number">15</span><span class="string">s</span> <span class="comment"># Evaluate rules every 15 seconds. The default is every 1 minute.</span></span><br><span class="line">  <span class="comment"># scrape_timeout is set to the global default (10s).</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Alertmanager configuration</span></span><br><span class="line"><span class="attr">alerting:</span></span><br><span class="line"><span class="attr">  alertmanagers:</span></span><br><span class="line"><span class="attr">  - static_configs:</span></span><br><span class="line"><span class="attr">    - targets:</span></span><br><span class="line">      <span class="comment"># - alertmanager:9093</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Load rules once and periodically evaluate them according to the global 'evaluation_interval'.</span></span><br><span class="line"><span class="attr">rule_files:</span></span><br><span class="line">  <span class="comment"># - "first_rules.yml"</span></span><br><span class="line">  <span class="comment"># - "second_rules.yml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A scrape configuration containing exactly one endpoint to scrape:</span></span><br><span class="line"><span class="comment"># Here it's Prometheus itself.</span></span><br><span class="line"><span class="attr">scrape_configs:</span></span><br><span class="line">  <span class="comment"># The job name is added as a label `job=&lt;job_name&gt;` to any timeseries scraped from this config.</span></span><br><span class="line"><span class="attr">  - job_name:</span> <span class="string">'prometheus'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># metrics_path defaults to '/metrics'</span></span><br><span class="line">    <span class="comment"># scheme defaults to 'http'.</span></span><br><span class="line">    <span class="comment">#暴露路径</span></span><br><span class="line"><span class="attr">    metrics_path:</span> <span class="string">/actuator/prometheus</span></span><br><span class="line"><span class="attr">    static_configs:</span></span><br><span class="line">    <span class="comment">#SpringBoot的ip和端口号</span></span><br><span class="line"><span class="attr">    - targets:</span> <span class="string">['localhost:8080']</span></span><br></pre></td></tr></table></figure><h4 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># ./prometheus</span></span><br></pre></td></tr></table></figure><p>打开 <a><a href="http://localhost:9090" target="_blank" rel="noopener">http://localhost:9090</a></a> 即可看到页面<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/prometheus.png" alt="Prometheus首页" title="">                </div>                <div class="image-caption">Prometheus首页</div>            </figure></p><h3 id="安装Grafana"><a href="#安装Grafana" class="headerlink" title="安装Grafana"></a>安装Grafana</h3><h4 id="MAC平台"><a href="#MAC平台" class="headerlink" title="MAC平台"></a>MAC平台</h4><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>mac需要提前安装brew</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brew install grafana</span></span><br></pre></td></tr></table></figure><h5 id="启动-1"><a href="#启动-1" class="headerlink" title="启动"></a>启动</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># brew services start grafana</span></span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><h6 id="登陆"><a href="#登陆" class="headerlink" title="登陆"></a>登陆</h6><p>打开页面<a><a href="http://localhost:3000/login" target="_blank" rel="noopener">http://localhost:3000/login</a></a><br>登录账号 admin 密码 admin</p><h6 id="增加数据源"><a href="#增加数据源" class="headerlink" title="增加数据源"></a>增加数据源</h6><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/adddatasource.png" alt="增加data source" title="">                </div>                <div class="image-caption">增加data source</div>            </figure><p>点击“Add data source”<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/seturl.png" alt="增加data source" title="">                </div>                <div class="image-caption">增加data source</div>            </figure><br>在这里<br>Type选择Prometheus<br>URL填上面的Prometheus访问地址</p><h6 id="增加图表"><a href="#增加图表" class="headerlink" title="增加图表"></a>增加图表</h6><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/adddashboard.png" alt="增加dashboard" title="">                </div>                <div class="image-caption">增加dashboard</div>            </figure><p>添加一个Graph<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/editpanel.png" alt="配置panel" title="">                </div>                <div class="image-caption">配置panel</div>            </figure><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2018/12/27/SpringBoot2-0整合Prometheus-Grafana/parameters.png" alt="配置参数" title="">                </div>                <div class="image-caption">配置参数</div>            </figure></p><h4 id="其他平台"><a href="#其他平台" class="headerlink" title="其他平台"></a>其他平台</h4><p>其他平台参照<a><a href="http://docs.grafana.org/installation" target="_blank" rel="noopener">http://docs.grafana.org/installation</a></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;总体框架图&lt;br&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="Prometheus" scheme="https://www.wqp0010.top/tags/Prometheus/"/>
    
      <category term="Grafana" scheme="https://www.wqp0010.top/tags/Grafana/"/>
    
  </entry>
  
  <entry>
    <title>maven打包插件使用</title>
    <link href="https://www.wqp0010.top/2018/12/18/maven%E6%89%93%E5%8C%85%E6%8F%92%E4%BB%B6%E4%BD%BF%E7%94%A8/"/>
    <id>https://www.wqp0010.top/2018/12/18/maven打包插件使用/</id>
    <published>2018-12-18T16:21:35.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>项目中需要把SpringBoot编译的jar，application.properties，application-pro.properties打包成zip发布</p><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>主要是使用maven-assembly-plugin插件解决</p><h4 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h4><h5 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h5><p>增加以下内容</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 打成zip包 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 打包配置文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/resources/package.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span> <span class="comment">&lt;!--  绑定到这个生命周期 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span> <span class="comment">&lt;!--执行一次--&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h5><p>内容如下</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--这个id会出现在zip包名称的后面，zip的完整名是：pom.xml中的artifactId-version-id.zip  该字段不能为空--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">id</span>&gt;</span>1.1.0<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--支持的打包格式有zip、tar、tar.gz (or tgz)、tar.bz2 (or tbz2)、jar、dir、war--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>true<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--管理一组文件的存放位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 打包后在压缩文件中位置，/表示直接放在了压缩文件根目录 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>application.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>application-prod.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">files</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">file</span>&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- 一个文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">source</span>&gt;</span>target/test.jar<span class="tag">&lt;/<span class="name">source</span>&gt;</span> <span class="comment">&lt;!-- 源文件 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span>    </span><br><span class="line">      <span class="tag">&lt;<span class="name">destName</span>&gt;</span>application.jar<span class="tag">&lt;/<span class="name">destName</span>&gt;</span> <span class="comment">&lt;!-- 目标文件名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">file</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">files</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="详细配置"><a href="#详细配置" class="headerlink" title="详细配置"></a>详细配置</h4><p>详细配置见官网 <br><br><a><a href="http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html" target="_blank" rel="noopener">http://maven.apache.org/plugins/maven-assembly-plugin/assembly.html</a></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;项目中需要把SpringBoot编译的jar，application.properties，application-pro.properti
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="maven" scheme="https://www.wqp0010.top/tags/maven/"/>
    
      <category term="pom" scheme="https://www.wqp0010.top/tags/pom/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot前后端整合</title>
    <link href="https://www.wqp0010.top/2018/12/18/SpringBoot%E5%89%8D%E5%90%8E%E7%AB%AF%E6%95%B4%E5%90%88/"/>
    <id>https://www.wqp0010.top/2018/12/18/SpringBoot前后端整合/</id>
    <published>2018-12-18T15:31:23.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h4 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h4><p>项目中后台代码用的SpringBoot，前端代码用的Vue，现在想放到一个项目中 用maven管理</p><h4 id="代码结构"><a href="#代码结构" class="headerlink" title="代码结构"></a>代码结构</h4><p>总结构大概如下：</p><ul><li>all<ul><li>backend <pre><code>- pom.xml</code></pre></li><li>frontend<pre><code>- pom.xml</code></pre></li><li>pom.xml</li></ul></li></ul><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><ul><li><ol><li>编译前端代码</li></ol></li><li><ol start="2"><li>复制编译好的前端文件到后台代码</li></ol></li><li><ol start="3"><li>编译后台代码</li></ol></li></ul><h4 id="pom"><a href="#pom" class="headerlink" title="pom"></a>pom</h4><h5 id="主工程"><a href="#主工程" class="headerlink" title="主工程"></a>主工程</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>frontend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">module</span>&gt;</span>backend<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是写好模块 指定顺序</p><h5 id="frontend"><a href="#frontend" class="headerlink" title="frontend"></a>frontend</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">     <span class="comment">&lt;!-- 配置npm安装 --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.eirslett<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>frontend-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 安装nodejs和npm--&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>install node and npm<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>install-node-and-npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">nodeVersion</span>&gt;</span>v10.12.0<span class="tag">&lt;/<span class="name">nodeVersion</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">npmVersion</span>&gt;</span>6.4.1<span class="tag">&lt;/<span class="name">npmVersion</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 安装webpack --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install webpack<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install webpack -g<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 安装项目依赖 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm install<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>install<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">         <span class="comment">&lt;!-- 编译 --&gt;</span></span><br><span class="line">         <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">id</span>&gt;</span>npm run build<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">goal</span>&gt;</span>npm<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">             <span class="tag">&lt;<span class="name">arguments</span>&gt;</span>run build<span class="tag">&lt;/<span class="name">arguments</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">         <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是利用frontend-maven-plugin插件进行一系列的操作:</p><ul><li>1.安装nodejs和npm命令</li><li>2.安装webpack</li><li>3.安装项目依赖</li><li>4.编译项目</li></ul><h5 id="backend"><a href="#backend" class="headerlink" title="backend"></a>backend</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 复制前端编译好的页面 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy frontend content<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">phase</span>&gt;</span>generate-resources<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 复制文件的目的目录  --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>src/main/resources/static/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">overwrite</span>&gt;</span>true<span class="tag">&lt;/<span class="name">overwrite</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!-- 复制文件的源目录 --&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.parent.basedir&#125;/frontend/target/dist<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>主要是利用frontend-maven-plugin插件,将编译好的前端文件复制到后台代码指定目录中</p><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><p>至此，即可完成需求<br>根目录下执行mvn package即可编译完整项目</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h4&gt;&lt;p&gt;项目中后台代码用的SpringBoot，前端代码用的Vue，现在想放到一个项目中 用maven管理&lt;/p&gt;
&lt;h4 id=&quot;代码结构&quot;&gt;&lt;a
      
    
    </summary>
    
    
      <category term="SpringBoot" scheme="https://www.wqp0010.top/tags/SpringBoot/"/>
    
      <category term="maven" scheme="https://www.wqp0010.top/tags/maven/"/>
    
      <category term="pom" scheme="https://www.wqp0010.top/tags/pom/"/>
    
      <category term="Vue" scheme="https://www.wqp0010.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>docker命令 (二)</title>
    <link href="https://www.wqp0010.top/2018/12/18/docker%E5%91%BD%E4%BB%A4%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://www.wqp0010.top/2018/12/18/docker命令（二）/</id>
    <published>2018-12-18T14:30:03.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="镜像使用"><a href="#镜像使用" class="headerlink" title="镜像使用"></a>镜像使用</h3><h4 id="列出镜像列表"><a href="#列出镜像列表" class="headerlink" title="列出镜像列表"></a>列出镜像列表</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker images</span></span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">REPOSITORY            TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">centos                6.7                 192ad0341c8b        2 months ago        191MB</span><br><span class="line">openjdk               8-jdk-alpine        54ae553cb104        3 months ago        103MB</span><br><span class="line">training/webapp       latest              6fae60ef3446        3 years ago         349MB</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li><p>REPOSITORY：表示镜像的仓库源</p></li><li><p>TAG：镜像的标签</p></li><li><p>IMAGE ID：镜像ID</p></li><li><p>CREATED：镜像创建时间</p></li><li><p>SIZE：镜像大小</p></li></ul><p>同一仓库源可以有多个 TAG，代表这个仓库源的不同个版本，如ubuntu仓库源里，有15.10、14.04等多个不同的版本，我们使用 REPOSITORY:TAG 来定义不同的镜像。</p><h4 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull centos:6.7</span></span><br></pre></td></tr></table></figure><p>下载完成后，我们可以直接使用这个镜像来运行容器。</p><h4 id="查找镜像"><a href="#查找镜像" class="headerlink" title="查找镜像"></a>查找镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker search httpd</span></span><br></pre></td></tr></table></figure><p>显示为：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">NAME                                    DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED</span><br><span class="line">httpd                                   The Apache HTTP Server Project                  2236                [OK]</span><br><span class="line">hypriot/rpi-busybox-httpd               Raspberry Pi compatible Docker Image with a …   45</span><br><span class="line">centos/httpd                                                                            21                                      [OK]</span><br><span class="line">centos/httpd-24-centos7                 Platform <span class="keyword">for</span> running Apache httpd 2.4 or bui…   20</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>NAME:镜像仓库源的名称</li><li>DESCRIPTION:镜像的描述</li><li>OFFICIAL:是否docker官方发布</li></ul><h3 id="创建镜像"><a href="#创建镜像" class="headerlink" title="创建镜像"></a>创建镜像</h3><h4 id="更新镜像"><a href="#更新镜像" class="headerlink" title="更新镜像"></a>更新镜像</h4><h5 id="创建容器"><a href="#创建容器" class="headerlink" title="创建容器"></a>创建容器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -t -i ubuntu:15.10 /bin/bash</span></span><br></pre></td></tr></table></figure><p>在容器内执行apt-get update 然后退出</p><h5 id="提交容器"><a href="#提交容器" class="headerlink" title="提交容器"></a>提交容器</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker commit -m="has update" -a="wu" e218edb10161 wu/ubuntu:v2</span></span><br></pre></td></tr></table></figure><p>各个参数说明：</p><ul><li><p>-m:提交的描述信息</p></li><li><p>-a:指定镜像作者</p></li><li><p>e218edb10161：容器ID</p></li><li><p>wu/ubuntu:v2:指定要创建的目标镜像名</p></li></ul><h4 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h4><h5 id="创建Dockerfile"><a href="#创建Dockerfile" class="headerlink" title="创建Dockerfile"></a>创建Dockerfile</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vim Dockerfile</span></span><br></pre></td></tr></table></figure><p>内容如下:</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">FROM    centos:6.7</span><br><span class="line">MAINTAINER      Fisher <span class="string">"fisher@sudops.com"</span></span><br><span class="line"></span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> <span class="string">'root:123456'</span> |chpasswd</span><br><span class="line">RUN     useradd wu</span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> <span class="string">'wu:123456'</span> |chpasswd</span><br><span class="line">RUN     /bin/<span class="built_in">echo</span> -e <span class="string">"LANG=\"en_US.UTF-8\""</span> &gt;/etc/default/<span class="built_in">local</span></span><br><span class="line">EXPOSE  22</span><br><span class="line">EXPOSE  80</span><br><span class="line">CMD     /usr/sbin/sshd -D</span><br></pre></td></tr></table></figure><p>每一个指令都会在镜像上创建一个新的层，每一个指令的前缀都必须是大写的。<br><br>第一条FROM，指定使用哪个镜像源<br><br>RUN 指令告诉docker 在镜像内执行命令，安装了什么。。。<br></p><h5 id="构建镜像-1"><a href="#构建镜像-1" class="headerlink" title="构建镜像"></a>构建镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker build -t wu/centos:6.7 .</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>-t ：指定要创建的目标镜像名</li><li>. ：Dockerfile 文件所在目录，可以指定Dockerfile 的绝对路径</li></ul><h5 id="启动构造好的镜像"><a href="#启动构造好的镜像" class="headerlink" title="启动构造好的镜像"></a>启动构造好的镜像</h5><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -t -i wu/centos:6.7 /bin/bash</span></span><br></pre></td></tr></table></figure><p>在镜像内运行：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@e1b7c2d96228 /]<span class="comment"># id wu</span></span><br><span class="line">uid=500(wu) gid=500(wu) groups=500(wu)</span><br></pre></td></tr></table></figure><p>可以发现已经成功创建了用户wu</p><h4 id="设置镜像标签"><a href="#设置镜像标签" class="headerlink" title="设置镜像标签"></a>设置镜像标签</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker tag 286139a0cf69 wu/centos:dev</span></span><br></pre></td></tr></table></figure><p>可以发现镜像中多了一条Tag为dev的记录</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;镜像使用&quot;&gt;&lt;a href=&quot;#镜像使用&quot; class=&quot;headerlink&quot; title=&quot;镜像使用&quot;&gt;&lt;/a&gt;镜像使用&lt;/h3&gt;&lt;h4 id=&quot;列出镜像列表&quot;&gt;&lt;a href=&quot;#列出镜像列表&quot; class=&quot;headerlink&quot; title=&quot;列出镜像列
      
    
    </summary>
    
    
      <category term="docker" scheme="https://www.wqp0010.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>docker命令 (一)</title>
    <link href="https://www.wqp0010.top/2018/12/17/docker%E5%91%BD%E4%BB%A4%20(%E4%B8%80)/"/>
    <id>https://www.wqp0010.top/2018/12/17/docker命令 (一)/</id>
    <published>2018-12-17T11:33:07.000Z</published>
    <updated>2020-06-30T00:33:58.866Z</updated>
    
    <content type="html"><![CDATA[<h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run centos:6.7 /bin/echo "Hello world"</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Hello world</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>docker run 运行一个容器</li><li>centos:6.7  指定要运行的镜像，Docker首先从本地主机上查找镜像是否存在，如果不存在，Docker 就会从镜像仓库 Docker Hub 下载公共镜像</li><li>/bin/echo “Hello world” 在启动的容器里执行的命令</li></ul><h3 id="运行交互式的容器"><a href="#运行交互式的容器" class="headerlink" title="运行交互式的容器"></a>运行交互式的容器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -i -t centos:6.7 /bin/bash</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@95f68434a3b2 /]<span class="comment">#</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>-t 在新容器内指定一个伪终端或终端</li><li>-i 允许你对容器内的标准输入 (STDIN) 进行交互</li></ul><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><h4 id="后台启动"><a href="#后台启动" class="headerlink" title="后台启动"></a>后台启动</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d centos:6.7 /bin/sh -c "while true; do echo hello world; sleep 1; done"</span></span><br></pre></td></tr></table></figure><p>结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">4767f1d1c05be0967e68a61418a40a1c538dc4b7c362b71aafb8c79dcbffc4c3</span><br></pre></td></tr></table></figure><p>这个长字符串叫做容器ID，对每个容器来说都是唯一的</p><h4 id="查看后台运行的容器"><a href="#查看后台运行的容器" class="headerlink" title="查看后台运行的容器"></a>查看后台运行的容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker ps</span></span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS               NAMES</span><br><span class="line">4767f1d1c05b        centos:6.7          <span class="string">"/bin/sh -c 'while t…"</span>   10 seconds ago      Up 9 seconds                            compassionate_perlman</span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>CONTAINER ID:容器ID</li><li>NAMES:自动分配的容器名称</li></ul><h4 id="查看容器内的输出"><a href="#查看容器内的输出" class="headerlink" title="查看容器内的输出"></a>查看容器内的输出</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker logs 4767f1d1c05b</span></span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hello world</span><br><span class="line">hello world</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>说明：<br>CONTAINER ID和NAMES都可以生效</p><h4 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker stop 4767f1d1c05b</span></span><br></pre></td></tr></table></figure><p>再次用docker ps查看时发现已经停止了</p><h1 id="docker容器"><a href="#docker容器" class="headerlink" title="docker容器"></a>docker容器</h1><h3 id="运行一个web应用"><a href="#运行一个web应用" class="headerlink" title="运行一个web应用"></a>运行一个web应用</h3><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker pull training/webapp</span></span><br></pre></td></tr></table></figure><h4 id="启动web应用"><a href="#启动web应用" class="headerlink" title="启动web应用"></a>启动web应用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -P training/webapp python app.py</span></span><br></pre></td></tr></table></figure><p>参数说明:</p><ul><li><p>-d:让容器在后台运行。</p></li><li><p>-P:将容器内部使用的网络端口映射到我们使用的主机上。</p></li></ul><h4 id="查看应用"><a href="#查看应用" class="headerlink" title="查看应用"></a>查看应用</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#docker ps</span></span><br></pre></td></tr></table></figure><p>显示：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS                     NAMES</span><br><span class="line">e8052c72934f        training/webapp     <span class="string">"python app.py"</span>     8 seconds ago       Up 6 seconds        0.0.0.0:32768-&gt;5000/tcp   fervent_hoover</span><br></pre></td></tr></table></figure><p>PORTS列的0.0.0.0:32768-&gt;5000/tcp表示docker开放了5000端口映射到主机32768端口<br><br>通过 <a><a href="http://localhost:32768" target="_blank" rel="noopener">http://localhost:32768</a></a> 即可打开页面</p><h4 id="设置端口"><a href="#设置端口" class="headerlink" title="设置端口"></a>设置端口</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker run -d -p 5000:5000 training/webapp python app.py</span></span><br></pre></td></tr></table></figure><p>则可以吧docker的5000端口映射到主机的5000端口</p><h4 id="查看端口映射"><a href="#查看端口映射" class="headerlink" title="查看端口映射"></a>查看端口映射</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker port 9602135d4352</span></span><br><span class="line">``` </span><br><span class="line">则显示：</span><br><span class="line">``` bash</span><br><span class="line">5000/tcp -&gt; 0.0.0.0:5000</span><br></pre></td></tr></table></figure><h4 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker logs -f 9602135d4352</span></span><br></pre></td></tr></table></figure><ul><li>-f: 让 docker logs 像使用 tail -f 一样来输出容器内部的标准输出。</li></ul><h4 id="移除容器"><a href="#移除容器" class="headerlink" title="移除容器"></a>移除容器</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># docker rm 9602135d4352</span></span><br></pre></td></tr></table></figure><p>删除容器时，容器必须是停止状态</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;启动docker&quot;&gt;&lt;a href=&quot;#启动docker&quot; class=&quot;headerlink&quot; title=&quot;启动docker&quot;&gt;&lt;/a&gt;启动docker&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
      <category term="docker" scheme="https://www.wqp0010.top/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>JVM调优</title>
    <link href="https://www.wqp0010.top/2018/11/22/JVM%E8%B0%83%E4%BC%98/"/>
    <id>https://www.wqp0010.top/2018/11/22/JVM调优/</id>
    <published>2018-11-22T10:49:48.000Z</published>
    <updated>2020-06-30T00:33:58.858Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看java进程的启动参数"><a href="#查看java进程的启动参数" class="headerlink" title="查看java进程的启动参数"></a>查看java进程的启动参数</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jcmd 27876 VM.flags</span></span><br></pre></td></tr></table></figure><p>得到以下结果</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">27876:</span><br><span class="line">-XX:CICompilerCount=3 -XX:InitialHeapSize=264241152 -XX:MaxHeapSize=4208984064 -XX:MaxNewSize=1402994688 -XX:MinHeapDeltaBytes=524288 -XX:NewSize=88080384 -XX:OldSize=176160768 -XX:+UseCompressedClassPointers -XX:+UseCompressedOops -XX:+UseParallelGC</span><br></pre></td></tr></table></figure><h2 id="打印堆概要信息"><a href="#打印堆概要信息" class="headerlink" title="打印堆概要信息"></a>打印堆概要信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jmap -heap 27876</span></span><br></pre></td></tr></table></figure><p>得到以下结果<br></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Attaching to process ID 27876, please <span class="built_in">wait</span>...</span><br><span class="line">Debugger attached successfully.</span><br><span class="line">Server compiler detected.</span><br><span class="line">JVM version is 25.171-b11</span><br><span class="line"></span><br><span class="line">using thread-local object allocation.</span><br><span class="line">Parallel GC with 4 thread(s)</span><br><span class="line"></span><br><span class="line">Heap Configuration:</span><br><span class="line">   MinHeapFreeRatio         = 0</span><br><span class="line">   MaxHeapFreeRatio         = 100</span><br><span class="line">   MaxHeapSize              = 4208984064 (4014.0MB)</span><br><span class="line">   NewSize                  = 88080384 (84.0MB)</span><br><span class="line">   MaxNewSize               = 1402994688 (1338.0MB)</span><br><span class="line">   OldSize                  = 176160768 (168.0MB)</span><br><span class="line">   NewRatio                 = 2</span><br><span class="line">   SurvivorRatio            = 8</span><br><span class="line">   MetaspaceSize            = 21807104 (20.796875MB)</span><br><span class="line">   CompressedClassSpaceSize = 1073741824 (1024.0MB)</span><br><span class="line">   MaxMetaspaceSize         = 17592186044415 MB</span><br><span class="line">   G1HeapRegionSize         = 0 (0.0MB)</span><br><span class="line"></span><br><span class="line">Heap Usage:</span><br><span class="line">PS Young Generation</span><br><span class="line">Eden Space:</span><br><span class="line">   capacity = 706215936 (673.5MB)</span><br><span class="line">   used     = 53656856 (51.171165466308594MB)</span><br><span class="line">   free     = 652559080 (622.3288345336914MB)</span><br><span class="line">   7.597797396630823% used</span><br><span class="line">From Space:</span><br><span class="line">   capacity = 3670016 (3.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 3670016 (3.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">To Space:</span><br><span class="line">   capacity = 20447232 (19.5MB)</span><br><span class="line">   used     = 0 (0.0MB)</span><br><span class="line">   free     = 20447232 (19.5MB)</span><br><span class="line">   0.0% used</span><br><span class="line">PS Old Generation</span><br><span class="line">   capacity = 282066944 (269.0MB)</span><br><span class="line">   used     = 40132768 (38.273590087890625MB)</span><br><span class="line">   free     = 241934176 (230.72640991210938MB)</span><br><span class="line">   14.228100404420307% used</span><br><span class="line"></span><br><span class="line">26205 interned Strings occupying 3370072 bytes.</span><br></pre></td></tr></table></figure><h2 id="查看GC情况"><a href="#查看GC情况" class="headerlink" title="查看GC情况"></a>查看GC情况</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jstat -gccause 27876 5000 100</span></span><br></pre></td></tr></table></figure><p>参数说明：<br></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>gccause</td><td>垃圾收集统计概述（同-gcutil），附加最近两次垃圾回收事件的原因。</td></tr><tr><td>5000</td><td>打印间隔</td></tr><tr><td>100</td><td>打印次数</td></tr></tbody></table><p>得到如下结果：</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"> S0     S1     E      O      M     CCS    YGC     YGCT    FGC    FGCT     GCT    LGCC                 GCC</span><br><span class="line">0.00   0.00   7.60  14.23  97.49  96.72     16    0.312     4    0.636    0.948 Heap Dump Initiated GC No GC</span><br><span class="line">0.00   0.00   7.60  14.23  97.49  96.72     16    0.312     4    0.636    0.948 Heap Dump Initiated GC No GC</span><br><span class="line">0.00   0.00   7.60  14.23  97.49  96.72     16    0.312     4    0.636    0.948 Heap Dump Initiated GC No GC</span><br><span class="line">0.00   0.00   7.60  14.23  97.49  96.72     16    0.312     4    0.636    0.948 Heap Dump Initiated GC No GC</span><br></pre></td></tr></table></figure><h2 id="获取堆信息"><a href="#获取堆信息" class="headerlink" title="获取堆信息"></a>获取堆信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jmap -dump:live,format=b,file=test.hprof 27876</span></span><br></pre></td></tr></table></figure><p>得到一个test.hprof文件，用MAT打开就可以看到堆信息</p><h2 id="查看线程信息"><a href="#查看线程信息" class="headerlink" title="查看线程信息"></a>查看线程信息</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># jstack -l 2826|more</span></span><br></pre></td></tr></table></figure><p>参数说明：<br></p><table><thead><tr><th>字段</th><th>说明</th></tr></thead><tbody><tr><td>F</td><td>当正常输出请求不被响应时，强制输出线程堆栈</td></tr><tr><td>l</td><td>除堆栈外，显示关于锁的附加信息</td></tr><tr><td>m</td><td>如果调用到本地方法的话，可以显示C/C++的堆栈</td></tr></tbody></table><h2 id="查看非堆内存情况"><a href="#查看非堆内存情况" class="headerlink" title="查看非堆内存情况"></a>查看非堆内存情况</h2><p>需要在启动时加参数-XX:NativeMemoryTracking=summary -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics<br>注意该参数会导致一定的性能损耗，生产环境不建议使用</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">java -XX:NativeMemoryTracking=summary -XX:+UnlockDiagnosticVMOptions -XX:+PrintNMTStatistics -jar app.jar</span><br></pre></td></tr></table></figure><p>查看非堆内存</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">jcmd 2826 VM.native_memory summary scale=MB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看java进程的启动参数&quot;&gt;&lt;a href=&quot;#查看java进程的启动参数&quot; class=&quot;headerlink&quot; title=&quot;查看java进程的启动参数&quot;&gt;&lt;/a&gt;查看java进程的启动参数&lt;/h2&gt;&lt;figure class=&quot;highlight bash
      
    
    </summary>
    
    
      <category term="JVM" scheme="https://www.wqp0010.top/tags/JVM/"/>
    
  </entry>
  
</feed>
